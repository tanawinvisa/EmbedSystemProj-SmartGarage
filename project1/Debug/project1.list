
project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08005044  08005044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a8  080050a8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080050a8  080050a8  000150a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050b0  080050b0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050b0  080050b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050b4  080050b4  000150b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080050b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000080  08005138  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08005138  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9bf  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c07  00000000  00000000  0002da6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  0002f678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000302c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016705  00000000  00000000  00030e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddc6  00000000  00000000  00047575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e48c  00000000  00000000  0005533b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e37c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003890  00000000  00000000  000e3818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800502c 	.word	0x0800502c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800502c 	.word	0x0800502c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b974 	b.w	8000928 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	4604      	mov	r4, r0
 8000660:	468e      	mov	lr, r1
 8000662:	2b00      	cmp	r3, #0
 8000664:	d14d      	bne.n	8000702 <__udivmoddi4+0xaa>
 8000666:	428a      	cmp	r2, r1
 8000668:	4694      	mov	ip, r2
 800066a:	d969      	bls.n	8000740 <__udivmoddi4+0xe8>
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	b152      	cbz	r2, 8000688 <__udivmoddi4+0x30>
 8000672:	fa01 f302 	lsl.w	r3, r1, r2
 8000676:	f1c2 0120 	rsb	r1, r2, #32
 800067a:	fa20 f101 	lsr.w	r1, r0, r1
 800067e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000682:	ea41 0e03 	orr.w	lr, r1, r3
 8000686:	4094      	lsls	r4, r2
 8000688:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800068c:	0c21      	lsrs	r1, r4, #16
 800068e:	fbbe f6f8 	udiv	r6, lr, r8
 8000692:	fa1f f78c 	uxth.w	r7, ip
 8000696:	fb08 e316 	mls	r3, r8, r6, lr
 800069a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800069e:	fb06 f107 	mul.w	r1, r6, r7
 80006a2:	4299      	cmp	r1, r3
 80006a4:	d90a      	bls.n	80006bc <__udivmoddi4+0x64>
 80006a6:	eb1c 0303 	adds.w	r3, ip, r3
 80006aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ae:	f080 811f 	bcs.w	80008f0 <__udivmoddi4+0x298>
 80006b2:	4299      	cmp	r1, r3
 80006b4:	f240 811c 	bls.w	80008f0 <__udivmoddi4+0x298>
 80006b8:	3e02      	subs	r6, #2
 80006ba:	4463      	add	r3, ip
 80006bc:	1a5b      	subs	r3, r3, r1
 80006be:	b2a4      	uxth	r4, r4
 80006c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006c4:	fb08 3310 	mls	r3, r8, r0, r3
 80006c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006cc:	fb00 f707 	mul.w	r7, r0, r7
 80006d0:	42a7      	cmp	r7, r4
 80006d2:	d90a      	bls.n	80006ea <__udivmoddi4+0x92>
 80006d4:	eb1c 0404 	adds.w	r4, ip, r4
 80006d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006dc:	f080 810a 	bcs.w	80008f4 <__udivmoddi4+0x29c>
 80006e0:	42a7      	cmp	r7, r4
 80006e2:	f240 8107 	bls.w	80008f4 <__udivmoddi4+0x29c>
 80006e6:	4464      	add	r4, ip
 80006e8:	3802      	subs	r0, #2
 80006ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006ee:	1be4      	subs	r4, r4, r7
 80006f0:	2600      	movs	r6, #0
 80006f2:	b11d      	cbz	r5, 80006fc <__udivmoddi4+0xa4>
 80006f4:	40d4      	lsrs	r4, r2
 80006f6:	2300      	movs	r3, #0
 80006f8:	e9c5 4300 	strd	r4, r3, [r5]
 80006fc:	4631      	mov	r1, r6
 80006fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000702:	428b      	cmp	r3, r1
 8000704:	d909      	bls.n	800071a <__udivmoddi4+0xc2>
 8000706:	2d00      	cmp	r5, #0
 8000708:	f000 80ef 	beq.w	80008ea <__udivmoddi4+0x292>
 800070c:	2600      	movs	r6, #0
 800070e:	e9c5 0100 	strd	r0, r1, [r5]
 8000712:	4630      	mov	r0, r6
 8000714:	4631      	mov	r1, r6
 8000716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071a:	fab3 f683 	clz	r6, r3
 800071e:	2e00      	cmp	r6, #0
 8000720:	d14a      	bne.n	80007b8 <__udivmoddi4+0x160>
 8000722:	428b      	cmp	r3, r1
 8000724:	d302      	bcc.n	800072c <__udivmoddi4+0xd4>
 8000726:	4282      	cmp	r2, r0
 8000728:	f200 80f9 	bhi.w	800091e <__udivmoddi4+0x2c6>
 800072c:	1a84      	subs	r4, r0, r2
 800072e:	eb61 0303 	sbc.w	r3, r1, r3
 8000732:	2001      	movs	r0, #1
 8000734:	469e      	mov	lr, r3
 8000736:	2d00      	cmp	r5, #0
 8000738:	d0e0      	beq.n	80006fc <__udivmoddi4+0xa4>
 800073a:	e9c5 4e00 	strd	r4, lr, [r5]
 800073e:	e7dd      	b.n	80006fc <__udivmoddi4+0xa4>
 8000740:	b902      	cbnz	r2, 8000744 <__udivmoddi4+0xec>
 8000742:	deff      	udf	#255	; 0xff
 8000744:	fab2 f282 	clz	r2, r2
 8000748:	2a00      	cmp	r2, #0
 800074a:	f040 8092 	bne.w	8000872 <__udivmoddi4+0x21a>
 800074e:	eba1 010c 	sub.w	r1, r1, ip
 8000752:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000756:	fa1f fe8c 	uxth.w	lr, ip
 800075a:	2601      	movs	r6, #1
 800075c:	0c20      	lsrs	r0, r4, #16
 800075e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000762:	fb07 1113 	mls	r1, r7, r3, r1
 8000766:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800076a:	fb0e f003 	mul.w	r0, lr, r3
 800076e:	4288      	cmp	r0, r1
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x12c>
 8000772:	eb1c 0101 	adds.w	r1, ip, r1
 8000776:	f103 38ff 	add.w	r8, r3, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x12a>
 800077c:	4288      	cmp	r0, r1
 800077e:	f200 80cb 	bhi.w	8000918 <__udivmoddi4+0x2c0>
 8000782:	4643      	mov	r3, r8
 8000784:	1a09      	subs	r1, r1, r0
 8000786:	b2a4      	uxth	r4, r4
 8000788:	fbb1 f0f7 	udiv	r0, r1, r7
 800078c:	fb07 1110 	mls	r1, r7, r0, r1
 8000790:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000794:	fb0e fe00 	mul.w	lr, lr, r0
 8000798:	45a6      	cmp	lr, r4
 800079a:	d908      	bls.n	80007ae <__udivmoddi4+0x156>
 800079c:	eb1c 0404 	adds.w	r4, ip, r4
 80007a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007a4:	d202      	bcs.n	80007ac <__udivmoddi4+0x154>
 80007a6:	45a6      	cmp	lr, r4
 80007a8:	f200 80bb 	bhi.w	8000922 <__udivmoddi4+0x2ca>
 80007ac:	4608      	mov	r0, r1
 80007ae:	eba4 040e 	sub.w	r4, r4, lr
 80007b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007b6:	e79c      	b.n	80006f2 <__udivmoddi4+0x9a>
 80007b8:	f1c6 0720 	rsb	r7, r6, #32
 80007bc:	40b3      	lsls	r3, r6
 80007be:	fa22 fc07 	lsr.w	ip, r2, r7
 80007c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007c6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ca:	fa01 f306 	lsl.w	r3, r1, r6
 80007ce:	431c      	orrs	r4, r3
 80007d0:	40f9      	lsrs	r1, r7
 80007d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007d6:	fa00 f306 	lsl.w	r3, r0, r6
 80007da:	fbb1 f8f9 	udiv	r8, r1, r9
 80007de:	0c20      	lsrs	r0, r4, #16
 80007e0:	fa1f fe8c 	uxth.w	lr, ip
 80007e4:	fb09 1118 	mls	r1, r9, r8, r1
 80007e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007ec:	fb08 f00e 	mul.w	r0, r8, lr
 80007f0:	4288      	cmp	r0, r1
 80007f2:	fa02 f206 	lsl.w	r2, r2, r6
 80007f6:	d90b      	bls.n	8000810 <__udivmoddi4+0x1b8>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000800:	f080 8088 	bcs.w	8000914 <__udivmoddi4+0x2bc>
 8000804:	4288      	cmp	r0, r1
 8000806:	f240 8085 	bls.w	8000914 <__udivmoddi4+0x2bc>
 800080a:	f1a8 0802 	sub.w	r8, r8, #2
 800080e:	4461      	add	r1, ip
 8000810:	1a09      	subs	r1, r1, r0
 8000812:	b2a4      	uxth	r4, r4
 8000814:	fbb1 f0f9 	udiv	r0, r1, r9
 8000818:	fb09 1110 	mls	r1, r9, r0, r1
 800081c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000820:	fb00 fe0e 	mul.w	lr, r0, lr
 8000824:	458e      	cmp	lr, r1
 8000826:	d908      	bls.n	800083a <__udivmoddi4+0x1e2>
 8000828:	eb1c 0101 	adds.w	r1, ip, r1
 800082c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000830:	d26c      	bcs.n	800090c <__udivmoddi4+0x2b4>
 8000832:	458e      	cmp	lr, r1
 8000834:	d96a      	bls.n	800090c <__udivmoddi4+0x2b4>
 8000836:	3802      	subs	r0, #2
 8000838:	4461      	add	r1, ip
 800083a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800083e:	fba0 9402 	umull	r9, r4, r0, r2
 8000842:	eba1 010e 	sub.w	r1, r1, lr
 8000846:	42a1      	cmp	r1, r4
 8000848:	46c8      	mov	r8, r9
 800084a:	46a6      	mov	lr, r4
 800084c:	d356      	bcc.n	80008fc <__udivmoddi4+0x2a4>
 800084e:	d053      	beq.n	80008f8 <__udivmoddi4+0x2a0>
 8000850:	b15d      	cbz	r5, 800086a <__udivmoddi4+0x212>
 8000852:	ebb3 0208 	subs.w	r2, r3, r8
 8000856:	eb61 010e 	sbc.w	r1, r1, lr
 800085a:	fa01 f707 	lsl.w	r7, r1, r7
 800085e:	fa22 f306 	lsr.w	r3, r2, r6
 8000862:	40f1      	lsrs	r1, r6
 8000864:	431f      	orrs	r7, r3
 8000866:	e9c5 7100 	strd	r7, r1, [r5]
 800086a:	2600      	movs	r6, #0
 800086c:	4631      	mov	r1, r6
 800086e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000872:	f1c2 0320 	rsb	r3, r2, #32
 8000876:	40d8      	lsrs	r0, r3
 8000878:	fa0c fc02 	lsl.w	ip, ip, r2
 800087c:	fa21 f303 	lsr.w	r3, r1, r3
 8000880:	4091      	lsls	r1, r2
 8000882:	4301      	orrs	r1, r0
 8000884:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000888:	fa1f fe8c 	uxth.w	lr, ip
 800088c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000890:	fb07 3610 	mls	r6, r7, r0, r3
 8000894:	0c0b      	lsrs	r3, r1, #16
 8000896:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800089a:	fb00 f60e 	mul.w	r6, r0, lr
 800089e:	429e      	cmp	r6, r3
 80008a0:	fa04 f402 	lsl.w	r4, r4, r2
 80008a4:	d908      	bls.n	80008b8 <__udivmoddi4+0x260>
 80008a6:	eb1c 0303 	adds.w	r3, ip, r3
 80008aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ae:	d22f      	bcs.n	8000910 <__udivmoddi4+0x2b8>
 80008b0:	429e      	cmp	r6, r3
 80008b2:	d92d      	bls.n	8000910 <__udivmoddi4+0x2b8>
 80008b4:	3802      	subs	r0, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1b9b      	subs	r3, r3, r6
 80008ba:	b289      	uxth	r1, r1
 80008bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008c0:	fb07 3316 	mls	r3, r7, r6, r3
 80008c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008c8:	fb06 f30e 	mul.w	r3, r6, lr
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x28a>
 80008d0:	eb1c 0101 	adds.w	r1, ip, r1
 80008d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008d8:	d216      	bcs.n	8000908 <__udivmoddi4+0x2b0>
 80008da:	428b      	cmp	r3, r1
 80008dc:	d914      	bls.n	8000908 <__udivmoddi4+0x2b0>
 80008de:	3e02      	subs	r6, #2
 80008e0:	4461      	add	r1, ip
 80008e2:	1ac9      	subs	r1, r1, r3
 80008e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80008e8:	e738      	b.n	800075c <__udivmoddi4+0x104>
 80008ea:	462e      	mov	r6, r5
 80008ec:	4628      	mov	r0, r5
 80008ee:	e705      	b.n	80006fc <__udivmoddi4+0xa4>
 80008f0:	4606      	mov	r6, r0
 80008f2:	e6e3      	b.n	80006bc <__udivmoddi4+0x64>
 80008f4:	4618      	mov	r0, r3
 80008f6:	e6f8      	b.n	80006ea <__udivmoddi4+0x92>
 80008f8:	454b      	cmp	r3, r9
 80008fa:	d2a9      	bcs.n	8000850 <__udivmoddi4+0x1f8>
 80008fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000900:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000904:	3801      	subs	r0, #1
 8000906:	e7a3      	b.n	8000850 <__udivmoddi4+0x1f8>
 8000908:	4646      	mov	r6, r8
 800090a:	e7ea      	b.n	80008e2 <__udivmoddi4+0x28a>
 800090c:	4620      	mov	r0, r4
 800090e:	e794      	b.n	800083a <__udivmoddi4+0x1e2>
 8000910:	4640      	mov	r0, r8
 8000912:	e7d1      	b.n	80008b8 <__udivmoddi4+0x260>
 8000914:	46d0      	mov	r8, sl
 8000916:	e77b      	b.n	8000810 <__udivmoddi4+0x1b8>
 8000918:	3b02      	subs	r3, #2
 800091a:	4461      	add	r1, ip
 800091c:	e732      	b.n	8000784 <__udivmoddi4+0x12c>
 800091e:	4630      	mov	r0, r6
 8000920:	e709      	b.n	8000736 <__udivmoddi4+0xde>
 8000922:	4464      	add	r4, ip
 8000924:	3802      	subs	r0, #2
 8000926:	e742      	b.n	80007ae <__udivmoddi4+0x156>

08000928 <__aeabi_idiv0>:
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <HAL_UART_RxCpltCallback>:
char state0[2] = "00";
char state1[2] = "01";
char state2[2] = "10";
char state3[2] = "11";
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, (uint8_t*) Rx_data, 2);
 8000934:	2202      	movs	r2, #2
 8000936:	4906      	ldr	r1, [pc, #24]	; (8000950 <HAL_UART_RxCpltCallback+0x24>)
 8000938:	4806      	ldr	r0, [pc, #24]	; (8000954 <HAL_UART_RxCpltCallback+0x28>)
 800093a:	f002 ff3e 	bl	80037ba <HAL_UART_Receive_IT>
 800093e:	4b04      	ldr	r3, [pc, #16]	; (8000950 <HAL_UART_RxCpltCallback+0x24>)
 8000940:	881a      	ldrh	r2, [r3, #0]
  memcpy(state,Rx_data,2);
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_UART_RxCpltCallback+0x2c>)
 8000944:	801a      	strh	r2, [r3, #0]
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200001b4 	.word	0x200001b4
 8000954:	2000012c 	.word	0x2000012c
 8000958:	20000234 	.word	0x20000234

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000960:	f000 fd9a 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000964:	f000 f844 	bl	80009f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f000 f9be 	bl	8000ce8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096c:	f000 f992 	bl	8000c94 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000970:	f000 f8a8 	bl	8000ac4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000974:	f000 f964 	bl	8000c40 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000978:	f000 f914 	bl	8000ba4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*) Rx_data,sizeof(Rx_data));
 800097c:	2202      	movs	r2, #2
 800097e:	4915      	ldr	r1, [pc, #84]	; (80009d4 <main+0x78>)
 8000980:	4815      	ldr	r0, [pc, #84]	; (80009d8 <main+0x7c>)
 8000982:	f002 ff1a 	bl	80037ba <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <main+0x80>)
 800098e:	f001 f941 	bl	8001c14 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000998:	4810      	ldr	r0, [pc, #64]	; (80009dc <main+0x80>)
 800099a:	f001 f93b 	bl	8001c14 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  	calculateDistance();
 800099e:	f000 fa8b 	bl	8000eb8 <calculateDistance>
	  	  	checkState();
 80009a2:	f000 fb13 	bl	8000fcc <checkState>
	  		//Print to UART terminal for debugging
	  		sprintf(uartBuf, "Distance (cm)  = %.1f\r\n", distance);
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <main+0x84>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff fde4 	bl	8000578 <__aeabi_f2d>
 80009b0:	4602      	mov	r2, r0
 80009b2:	460b      	mov	r3, r1
 80009b4:	490b      	ldr	r1, [pc, #44]	; (80009e4 <main+0x88>)
 80009b6:	480c      	ldr	r0, [pc, #48]	; (80009e8 <main+0x8c>)
 80009b8:	f003 feca 	bl	8004750 <siprintf>
	  		HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <main+0x8c>)
 80009be:	f7ff fc19 	bl	80001f4 <strlen>
 80009c2:	4603      	mov	r3, r0
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	2364      	movs	r3, #100	; 0x64
 80009c8:	4907      	ldr	r1, [pc, #28]	; (80009e8 <main+0x8c>)
 80009ca:	4808      	ldr	r0, [pc, #32]	; (80009ec <main+0x90>)
 80009cc:	f002 fe63 	bl	8003696 <HAL_UART_Transmit>
	  	  	calculateDistance();
 80009d0:	e7e5      	b.n	800099e <main+0x42>
 80009d2:	bf00      	nop
 80009d4:	200001b4 	.word	0x200001b4
 80009d8:	2000012c 	.word	0x2000012c
 80009dc:	40020800 	.word	0x40020800
 80009e0:	200001c8 	.word	0x200001c8
 80009e4:	08005044 	.word	0x08005044
 80009e8:	200001d0 	.word	0x200001d0
 80009ec:	20000170 	.word	0x20000170

080009f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b094      	sub	sp, #80	; 0x50
 80009f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2230      	movs	r2, #48	; 0x30
 80009fc:	2100      	movs	r1, #0
 80009fe:	4618      	mov	r0, r3
 8000a00:	f003 fe9e 	bl	8004740 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <SystemClock_Config+0xcc>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a27      	ldr	r2, [pc, #156]	; (8000abc <SystemClock_Config+0xcc>)
 8000a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <SystemClock_Config+0xcc>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a21      	ldr	r2, [pc, #132]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <SystemClock_Config+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a50:	2301      	movs	r3, #1
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a54:	2310      	movs	r3, #16
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a60:	2310      	movs	r3, #16
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a72:	f107 0320 	add.w	r3, r7, #32
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 f900 	bl	8001c7c <HAL_RCC_OscConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a82:	f000 fb43 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a86:	230f      	movs	r3, #15
 8000a88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 fb62 	bl	800216c <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000aae:	f000 fb2d 	bl	800110c <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3750      	adds	r7, #80	; 0x50
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40007000 	.word	0x40007000

08000ac4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aee:	4b2b      	ldr	r3, [pc, #172]	; (8000b9c <MX_TIM2_Init+0xd8>)
 8000af0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <MX_TIM2_Init+0xd8>)
 8000af8:	2253      	movs	r2, #83	; 0x53
 8000afa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <MX_TIM2_Init+0xd8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 8000b02:	4b26      	ldr	r3, [pc, #152]	; (8000b9c <MX_TIM2_Init+0xd8>)
 8000b04:	4a26      	ldr	r2, [pc, #152]	; (8000ba0 <MX_TIM2_Init+0xdc>)
 8000b06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b08:	4b24      	ldr	r3, [pc, #144]	; (8000b9c <MX_TIM2_Init+0xd8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <MX_TIM2_Init+0xd8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b14:	4821      	ldr	r0, [pc, #132]	; (8000b9c <MX_TIM2_Init+0xd8>)
 8000b16:	f001 fd49 	bl	80025ac <HAL_TIM_Base_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8000b20:	f000 faf4 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b28:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2a:	f107 0318 	add.w	r3, r7, #24
 8000b2e:	4619      	mov	r1, r3
 8000b30:	481a      	ldr	r0, [pc, #104]	; (8000b9c <MX_TIM2_Init+0xd8>)
 8000b32:	f002 f94f 	bl	8002dd4 <HAL_TIM_ConfigClockSource>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 fae6 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000b40:	4816      	ldr	r0, [pc, #88]	; (8000b9c <MX_TIM2_Init+0xd8>)
 8000b42:	f001 fd82 	bl	800264a <HAL_TIM_IC_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f000 fade 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480f      	ldr	r0, [pc, #60]	; (8000b9c <MX_TIM2_Init+0xd8>)
 8000b60:	f002 fcca 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000b6a:	f000 facf 	bl	800110c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000b6e:	230a      	movs	r3, #10
 8000b70:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b72:	2301      	movs	r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 4;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_TIM2_Init+0xd8>)
 8000b86:	f002 f889 	bl	8002c9c <HAL_TIM_IC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000b90:	f000 fabc 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3728      	adds	r7, #40	; 0x28
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000009c 	.word	0x2000009c
 8000ba0:	000f423f 	.word	0x000f423f

08000ba4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bc0:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <MX_TIM4_Init+0x98>)
 8000bc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000be6:	4814      	ldr	r0, [pc, #80]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000be8:	f001 fce0 	bl	80025ac <HAL_TIM_Base_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f000 fa8b 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000c04:	f002 f8e6 	bl	8002dd4 <HAL_TIM_ConfigClockSource>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000c0e:	f000 fa7d 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <MX_TIM4_Init+0x94>)
 8000c20:	f002 fc6a 	bl	80034f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000c2a:	f000 fa6f 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200000e4 	.word	0x200000e4
 8000c3c:	40000800 	.word	0x40000800

08000c40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <MX_USART1_UART_Init+0x50>)
 8000c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c66:	220c      	movs	r2, #12
 8000c68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_USART1_UART_Init+0x4c>)
 8000c78:	f002 fcc0 	bl	80035fc <HAL_UART_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c82:	f000 fa43 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000012c 	.word	0x2000012c
 8000c90:	40011000 	.word	0x40011000

08000c94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_USART2_UART_Init+0x50>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	f002 fc96 	bl	80035fc <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cd6:	f000 fa19 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000170 	.word	0x20000170
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b39      	ldr	r3, [pc, #228]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a38      	ldr	r2, [pc, #224]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a31      	ldr	r2, [pc, #196]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a2a      	ldr	r2, [pc, #168]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b24      	ldr	r3, [pc, #144]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_GPIO_Init+0x100>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000d74:	481d      	ldr	r0, [pc, #116]	; (8000dec <MX_GPIO_Init+0x104>)
 8000d76:	f000 ff4d 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8000d80:	481b      	ldr	r0, [pc, #108]	; (8000df0 <MX_GPIO_Init+0x108>)
 8000d82:	f000 ff47 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d8c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4814      	ldr	r0, [pc, #80]	; (8000df0 <MX_GPIO_Init+0x108>)
 8000d9e:	f000 fdb5 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 8000da2:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	480c      	ldr	r0, [pc, #48]	; (8000dec <MX_GPIO_Init+0x104>)
 8000dbc:	f000 fda6 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000dc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_GPIO_Init+0x108>)
 8000dda:	f000 fd97 	bl	800190c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000
 8000df0:	40020800 	.word	0x40020800

08000df4 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d801      	bhi.n	8000e06 <usDelay+0x12>
 8000e02:	2302      	movs	r3, #2
 8000e04:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8000e06:	4a13      	ldr	r2, [pc, #76]	; (8000e54 <usDelay+0x60>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <usDelay+0x60>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <usDelay+0x60>)
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <usDelay+0x60>)
 8000e1a:	f023 0301 	bic.w	r3, r3, #1
 8000e1e:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <usDelay+0x60>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <usDelay+0x60>)
 8000e26:	f043 0301 	orr.w	r3, r3, #1
 8000e2a:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8000e2c:	bf00      	nop
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <usDelay+0x60>)
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d1f9      	bne.n	8000e2e <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <usDelay+0x60>)
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	4a05      	ldr	r2, [pc, #20]	; (8000e54 <usDelay+0x60>)
 8000e40:	f023 0301 	bic.w	r3, r3, #1
 8000e44:	6113      	str	r3, [r2, #16]
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	40000800 	.word	0x40000800

08000e58 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	//win code
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);////////////////

		if(captureIdx == 0) //Fisrt edge
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10a      	bne.n	8000e7e <HAL_TIM_IC_CaptureCallback+0x26>
		{
			edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //__HAL_TIM_GetCounter(&htim3);//
 8000e68:	2100      	movs	r1, #0
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f002 f87a 	bl	8002f64 <HAL_TIM_ReadCapturedValue>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_TIM_IC_CaptureCallback+0x54>)
 8000e74:	6013      	str	r3, [r2, #0]

			captureIdx = 1;
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
		{
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			captureIdx = 0;
			icFlag = 1;
		}
}
 8000e7c:	e010      	b.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x48>
		else if(captureIdx == 1) //Second edge
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d10c      	bne.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x48>
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e86:	2100      	movs	r1, #0
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f002 f86b 	bl	8002f64 <HAL_TIM_ReadCapturedValue>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000e92:	6013      	str	r3, [r2, #0]
			captureIdx = 0;
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
			icFlag = 1;
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	701a      	strb	r2, [r3, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200001b7 	.word	0x200001b7
 8000eac:	200001b8 	.word	0x200001b8
 8000eb0:	200001bc 	.word	0x200001bc
 8000eb4:	200001b6 	.word	0x200001b6

08000eb8 <calculateDistance>:
void calculateDistance(void){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
	//Set TRIG to LOW for few uSec
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, GPIO_PIN_RESET);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec4:	4837      	ldr	r0, [pc, #220]	; (8000fa4 <calculateDistance+0xec>)
 8000ec6:	f000 fea5 	bl	8001c14 <HAL_GPIO_WritePin>
	usDelay(3);
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f7ff ff92 	bl	8000df4 <usDelay>

    //*** START Ultrasonic measure routine ***//
 	//1. Output 10 usec TRIG
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed6:	4833      	ldr	r0, [pc, #204]	; (8000fa4 <calculateDistance+0xec>)
 8000ed8:	f000 fe9c 	bl	8001c14 <HAL_GPIO_WritePin>
  	usDelay(10);
 8000edc:	200a      	movs	r0, #10
 8000ede:	f7ff ff89 	bl	8000df4 <usDelay>
 	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, GPIO_PIN_RESET);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee8:	482e      	ldr	r0, [pc, #184]	; (8000fa4 <calculateDistance+0xec>)
 8000eea:	f000 fe93 	bl	8001c14 <HAL_GPIO_WritePin>
	//2. ECHO signal pulse width
	//Start IC timer
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	482d      	ldr	r0, [pc, #180]	; (8000fa8 <calculateDistance+0xf0>)
 8000ef2:	f001 fc03 	bl	80026fc <HAL_TIM_IC_Start_IT>
	//Wait for IC flag
	uint32_t startTick = HAL_GetTick();
 8000ef6:	f000 fb35 	bl	8001564 <HAL_GetTick>
 8000efa:	6078      	str	r0, [r7, #4]
	do
	{
		if(icFlag) break;
 8000efc:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <calculateDistance+0xf4>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d108      	bne.n	8000f16 <calculateDistance+0x5e>
	}while((HAL_GetTick() - startTick) < 500);  //500ms
 8000f04:	f000 fb2e 	bl	8001564 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f12:	d3f3      	bcc.n	8000efc <calculateDistance+0x44>
 8000f14:	e000      	b.n	8000f18 <calculateDistance+0x60>
		if(icFlag) break;
 8000f16:	bf00      	nop
	icFlag = 0;
 8000f18:	4b24      	ldr	r3, [pc, #144]	; (8000fac <calculateDistance+0xf4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4821      	ldr	r0, [pc, #132]	; (8000fa8 <calculateDistance+0xf0>)
 8000f22:	f001 fd05 	bl	8002930 <HAL_TIM_IC_Stop_IT>

	//Calculate distance in cm //
	if(edge2Time > edge1Time)
 8000f26:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <calculateDistance+0xf8>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <calculateDistance+0xfc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d913      	bls.n	8000f5a <calculateDistance+0xa2>
	{
		distance = ((edge2Time - edge1Time) + 0.0f)*speedOfSound;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <calculateDistance+0xf8>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <calculateDistance+0xfc>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	1ad3      	subs	r3, r2, r3
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f44:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000fb8 <calculateDistance+0x100>
 8000f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f4c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000fbc <calculateDistance+0x104>
 8000f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <calculateDistance+0x108>)
 8000f56:	edc3 7a00 	vstr	s15, [r3]
	}
	diffDistance = distancePrev-distance;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <calculateDistance+0x10c>)
 8000f5c:	ed93 7a00 	vldr	s14, [r3]
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <calculateDistance+0x108>)
 8000f62:	edd3 7a00 	vldr	s15, [r3]
 8000f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <calculateDistance+0x110>)
 8000f6c:	edc3 7a00 	vstr	s15, [r3]
	distancePrev = distance;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <calculateDistance+0x108>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <calculateDistance+0x10c>)
 8000f76:	6013      	str	r3, [r2, #0]
	// Q's code

	if (diffDistance > 5){
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <calculateDistance+0x110>)
 8000f7a:	edd3 7a00 	vldr	s15, [r3]
 8000f7e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8a:	dc00      	bgt.n	8000f8e <calculateDistance+0xd6>
				//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);//
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
		HAL_Delay(200);
	}
	///////
}
 8000f8c:	e006      	b.n	8000f9c <calculateDistance+0xe4>
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <calculateDistance+0xec>)
 8000f92:	f000 fe58 	bl	8001c46 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8000f96:	20c8      	movs	r0, #200	; 0xc8
 8000f98:	f000 faf0 	bl	800157c <HAL_Delay>
}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	2000009c 	.word	0x2000009c
 8000fac:	200001b6 	.word	0x200001b6
 8000fb0:	200001bc 	.word	0x200001bc
 8000fb4:	200001b8 	.word	0x200001b8
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	3c8c7e28 	.word	0x3c8c7e28
 8000fc0:	200001c8 	.word	0x200001c8
 8000fc4:	200001cc 	.word	0x200001cc
 8000fc8:	200001c4 	.word	0x200001c4

08000fcc <checkState>:
void checkState(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	if(strcmp(state,state0) == 0){
 8000fd0:	4946      	ldr	r1, [pc, #280]	; (80010ec <checkState+0x120>)
 8000fd2:	4847      	ldr	r0, [pc, #284]	; (80010f0 <checkState+0x124>)
 8000fd4:	f7ff f904 	bl	80001e0 <strcmp>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10c      	bne.n	8000ff8 <checkState+0x2c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe4:	4843      	ldr	r0, [pc, #268]	; (80010f4 <checkState+0x128>)
 8000fe6:	f000 fe15 	bl	8001c14 <HAL_GPIO_WritePin>
		//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);//
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ff0:	4840      	ldr	r0, [pc, #256]	; (80010f4 <checkState+0x128>)
 8000ff2:	f000 fe0f 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,SET);
		//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);//

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12,SET);
	}
}
 8000ff6:	e077      	b.n	80010e8 <checkState+0x11c>
	else if(strcmp(state,state1) == 0){
 8000ff8:	493f      	ldr	r1, [pc, #252]	; (80010f8 <checkState+0x12c>)
 8000ffa:	483d      	ldr	r0, [pc, #244]	; (80010f0 <checkState+0x124>)
 8000ffc:	f7ff f8f0 	bl	80001e0 <strcmp>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10c      	bne.n	8001020 <checkState+0x54>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800100c:	4839      	ldr	r0, [pc, #228]	; (80010f4 <checkState+0x128>)
 800100e:	f000 fe01 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001018:	4836      	ldr	r0, [pc, #216]	; (80010f4 <checkState+0x128>)
 800101a:	f000 fdfb 	bl	8001c14 <HAL_GPIO_WritePin>
}
 800101e:	e063      	b.n	80010e8 <checkState+0x11c>
	else if(strcmp(state,state2)==0){
 8001020:	4936      	ldr	r1, [pc, #216]	; (80010fc <checkState+0x130>)
 8001022:	4833      	ldr	r0, [pc, #204]	; (80010f0 <checkState+0x124>)
 8001024:	f7ff f8dc 	bl	80001e0 <strcmp>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d149      	bne.n	80010c2 <checkState+0xf6>
		if(detect){
 800102e:	4b34      	ldr	r3, [pc, #208]	; (8001100 <checkState+0x134>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d010      	beq.n	8001058 <checkState+0x8c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103c:	482d      	ldr	r0, [pc, #180]	; (80010f4 <checkState+0x128>)
 800103e:	f000 fde9 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12,SET);
 8001042:	2201      	movs	r2, #1
 8001044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001048:	482a      	ldr	r0, [pc, #168]	; (80010f4 <checkState+0x128>)
 800104a:	f000 fde3 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_Delay(1000);
 800104e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001052:	f000 fa93 	bl	800157c <HAL_Delay>
 8001056:	e00b      	b.n	8001070 <checkState+0xa4>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	4825      	ldr	r0, [pc, #148]	; (80010f4 <checkState+0x128>)
 8001060:	f000 fdd8 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12,RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106a:	4822      	ldr	r0, [pc, #136]	; (80010f4 <checkState+0x128>)
 800106c:	f000 fdd2 	bl	8001c14 <HAL_GPIO_WritePin>
		if(diffDistance > 20){
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <checkState+0x138>)
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800107a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800107e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001082:	dd0f      	ble.n	80010a4 <checkState+0xd8>
			detect = 1;
 8001084:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <checkState+0x134>)
 8001086:	2201      	movs	r2, #1
 8001088:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,SET);
 800108a:	2201      	movs	r2, #1
 800108c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001090:	4818      	ldr	r0, [pc, #96]	; (80010f4 <checkState+0x128>)
 8001092:	f000 fdbf 	bl	8001c14 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12,SET);
 8001096:	2201      	movs	r2, #1
 8001098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109c:	4815      	ldr	r0, [pc, #84]	; (80010f4 <checkState+0x128>)
 800109e:	f000 fdb9 	bl	8001c14 <HAL_GPIO_WritePin>
}
 80010a2:	e021      	b.n	80010e8 <checkState+0x11c>
		}else if(diffDistance < -20){
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <checkState+0x138>)
 80010a6:	edd3 7a00 	vldr	s15, [r3]
 80010aa:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80010ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b6:	d400      	bmi.n	80010ba <checkState+0xee>
}
 80010b8:	e016      	b.n	80010e8 <checkState+0x11c>
			detect = 0;
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <checkState+0x134>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	e012      	b.n	80010e8 <checkState+0x11c>
	else if(strcmp(state,state3) == 0){
 80010c2:	4911      	ldr	r1, [pc, #68]	; (8001108 <checkState+0x13c>)
 80010c4:	480a      	ldr	r0, [pc, #40]	; (80010f0 <checkState+0x124>)
 80010c6:	f7ff f88b 	bl	80001e0 <strcmp>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10b      	bne.n	80010e8 <checkState+0x11c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10,SET);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010d6:	4807      	ldr	r0, [pc, #28]	; (80010f4 <checkState+0x128>)
 80010d8:	f000 fd9c 	bl	8001c14 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12,SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e2:	4804      	ldr	r0, [pc, #16]	; (80010f4 <checkState+0x128>)
 80010e4:	f000 fd96 	bl	8001c14 <HAL_GPIO_WritePin>
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000234 	.word	0x20000234
 80010f4:	40020800 	.word	0x40020800
 80010f8:	20000004 	.word	0x20000004
 80010fc:	20000008 	.word	0x20000008
 8001100:	200001c0 	.word	0x200001c0
 8001104:	200001c4 	.word	0x200001c4
 8001108:	2000000c 	.word	0x2000000c

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_MspInit+0x4c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_MspInit+0x4c>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_MspInit+0x4c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_MspInit+0x4c>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x4c>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x4c>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001156:	2007      	movs	r0, #7
 8001158:	f000 fb04 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40023800 	.word	0x40023800

08001168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001188:	d134      	bne.n	80011f4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b25      	ldr	r3, [pc, #148]	; (8001224 <HAL_TIM_Base_MspInit+0xbc>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a24      	ldr	r2, [pc, #144]	; (8001224 <HAL_TIM_Base_MspInit+0xbc>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <HAL_TIM_Base_MspInit+0xbc>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_TIM_Base_MspInit+0xbc>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a1d      	ldr	r2, [pc, #116]	; (8001224 <HAL_TIM_Base_MspInit+0xbc>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_TIM_Base_MspInit+0xbc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c2:	2301      	movs	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c6:	2302      	movs	r3, #2
 80011c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011d2:	2301      	movs	r3, #1
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 0314 	add.w	r3, r7, #20
 80011da:	4619      	mov	r1, r3
 80011dc:	4812      	ldr	r0, [pc, #72]	; (8001228 <HAL_TIM_Base_MspInit+0xc0>)
 80011de:	f000 fb95 	bl	800190c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	201c      	movs	r0, #28
 80011e8:	f000 fac7 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ec:	201c      	movs	r0, #28
 80011ee:	f000 fae0 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80011f2:	e012      	b.n	800121a <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM4)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <HAL_TIM_Base_MspInit+0xc4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10d      	bne.n	800121a <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_TIM_Base_MspInit+0xbc>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_TIM_Base_MspInit+0xbc>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_TIM_Base_MspInit+0xbc>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000
 800122c:	40000800 	.word	0x40000800

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a36      	ldr	r2, [pc, #216]	; (8001328 <HAL_UART_MspInit+0xf8>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d135      	bne.n	80012be <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	4b35      	ldr	r3, [pc, #212]	; (800132c <HAL_UART_MspInit+0xfc>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a34      	ldr	r2, [pc, #208]	; (800132c <HAL_UART_MspInit+0xfc>)
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b32      	ldr	r3, [pc, #200]	; (800132c <HAL_UART_MspInit+0xfc>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	4b2e      	ldr	r3, [pc, #184]	; (800132c <HAL_UART_MspInit+0xfc>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a2d      	ldr	r2, [pc, #180]	; (800132c <HAL_UART_MspInit+0xfc>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b2b      	ldr	r3, [pc, #172]	; (800132c <HAL_UART_MspInit+0xfc>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800128a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800129c:	2307      	movs	r3, #7
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4822      	ldr	r0, [pc, #136]	; (8001330 <HAL_UART_MspInit+0x100>)
 80012a8:	f000 fb30 	bl	800190c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	2025      	movs	r0, #37	; 0x25
 80012b2:	f000 fa62 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012b6:	2025      	movs	r0, #37	; 0x25
 80012b8:	f000 fa7b 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012bc:	e030      	b.n	8001320 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <HAL_UART_MspInit+0x104>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d12b      	bne.n	8001320 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c8:	2300      	movs	r3, #0
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_UART_MspInit+0xfc>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a16      	ldr	r2, [pc, #88]	; (800132c <HAL_UART_MspInit+0xfc>)
 80012d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_UART_MspInit+0xfc>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_UART_MspInit+0xfc>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	4a0f      	ldr	r2, [pc, #60]	; (800132c <HAL_UART_MspInit+0xfc>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6313      	str	r3, [r2, #48]	; 0x30
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <HAL_UART_MspInit+0xfc>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001300:	230c      	movs	r3, #12
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001310:	2307      	movs	r3, #7
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	4619      	mov	r1, r3
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_UART_MspInit+0x100>)
 800131c:	f000 faf6 	bl	800190c <HAL_GPIO_Init>
}
 8001320:	bf00      	nop
 8001322:	3730      	adds	r7, #48	; 0x30
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40011000 	.word	0x40011000
 800132c:	40023800 	.word	0x40023800
 8001330:	40020000 	.word	0x40020000
 8001334:	40004400 	.word	0x40004400

08001338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800133c:	e7fe      	b.n	800133c <NMI_Handler+0x4>

0800133e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001342:	e7fe      	b.n	8001342 <HardFault_Handler+0x4>

08001344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <MemManage_Handler+0x4>

0800134a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <BusFault_Handler+0x4>

08001350 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <UsageFault_Handler+0x4>

08001356 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001384:	f000 f8da 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}

0800138c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <TIM2_IRQHandler+0x10>)
 8001392:	f001 fb7b 	bl	8002a8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000009c 	.word	0x2000009c

080013a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <USART1_IRQHandler+0x10>)
 80013a6:	f002 fa39 	bl	800381c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2000012c 	.word	0x2000012c

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f003 f982 	bl	80046ec <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20020000 	.word	0x20020000
 8001414:	00000400 	.word	0x00000400
 8001418:	20000238 	.word	0x20000238
 800141c:	20000250 	.word	0x20000250

08001420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <SystemInit+0x20>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <SystemInit+0x20>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800147c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800144a:	490e      	ldr	r1, [pc, #56]	; (8001484 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800144c:	4a0e      	ldr	r2, [pc, #56]	; (8001488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0b      	ldr	r2, [pc, #44]	; (800148c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001460:	4c0b      	ldr	r4, [pc, #44]	; (8001490 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800146e:	f7ff ffd7 	bl	8001420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001472:	f003 f941 	bl	80046f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001476:	f7ff fa71 	bl	800095c <main>
  bx  lr    
 800147a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800147c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001488:	080050b8 	.word	0x080050b8
  ldr r2, =_sbss
 800148c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001490:	20000250 	.word	0x20000250

08001494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC_IRQHandler>
	...

08001498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <HAL_Init+0x40>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <HAL_Init+0x40>)
 80014a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <HAL_Init+0x40>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <HAL_Init+0x40>)
 80014ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b4:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_Init+0x40>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c0:	2003      	movs	r0, #3
 80014c2:	f000 f94f 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c6:	2000      	movs	r0, #0
 80014c8:	f000 f808 	bl	80014dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014cc:	f7ff fe24 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00

080014dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014e4:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_InitTick+0x54>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_InitTick+0x58>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f967 	bl	80017ce <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f000 f92f 	bl	800177a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_InitTick+0x5c>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000010 	.word	0x20000010
 8001534:	20000018 	.word	0x20000018
 8001538:	20000014 	.word	0x20000014

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000018 	.word	0x20000018
 8001560:	2000023c 	.word	0x2000023c

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	2000023c 	.word	0x2000023c

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_Delay+0x44>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffde 	bl	8001564 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000018 	.word	0x20000018

080015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e0:	4013      	ands	r3, r2
 80015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <__NVIC_SetPriorityGrouping+0x44>)
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	60d3      	str	r3, [r2, #12]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <__NVIC_GetPriorityGrouping+0x18>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	0a1b      	lsrs	r3, r3, #8
 8001616:	f003 0307 	and.w	r3, r3, #7
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db0b      	blt.n	8001652 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 021f 	and.w	r2, r3, #31
 8001640:	4907      	ldr	r1, [pc, #28]	; (8001660 <__NVIC_EnableIRQ+0x38>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	095b      	lsrs	r3, r3, #5
 8001648:	2001      	movs	r0, #1
 800164a:	fa00 f202 	lsl.w	r2, r0, r2
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000e100 	.word	0xe000e100

08001664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	2b00      	cmp	r3, #0
 8001676:	db0a      	blt.n	800168e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	b2da      	uxtb	r2, r3
 800167c:	490c      	ldr	r1, [pc, #48]	; (80016b0 <__NVIC_SetPriority+0x4c>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	b2d2      	uxtb	r2, r2
 8001686:	440b      	add	r3, r1
 8001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800168c:	e00a      	b.n	80016a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4908      	ldr	r1, [pc, #32]	; (80016b4 <__NVIC_SetPriority+0x50>)
 8001694:	79fb      	ldrb	r3, [r7, #7]
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	3b04      	subs	r3, #4
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	b2d2      	uxtb	r2, r2
 80016a0:	440b      	add	r3, r1
 80016a2:	761a      	strb	r2, [r3, #24]
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	e000e100 	.word	0xe000e100
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b089      	sub	sp, #36	; 0x24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f1c3 0307 	rsb	r3, r3, #7
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	bf28      	it	cs
 80016d6:	2304      	movcs	r3, #4
 80016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3304      	adds	r3, #4
 80016de:	2b06      	cmp	r3, #6
 80016e0:	d902      	bls.n	80016e8 <NVIC_EncodePriority+0x30>
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b03      	subs	r3, #3
 80016e6:	e000      	b.n	80016ea <NVIC_EncodePriority+0x32>
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ec:	f04f 32ff 	mov.w	r2, #4294967295
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43da      	mvns	r2, r3
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	401a      	ands	r2, r3
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001700:	f04f 31ff 	mov.w	r1, #4294967295
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	43d9      	mvns	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001710:	4313      	orrs	r3, r2
         );
}
 8001712:	4618      	mov	r0, r3
 8001714:	3724      	adds	r7, #36	; 0x24
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff ff8e 	bl	8001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff29 	bl	80015c4 <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff3e 	bl	800160c <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff8e 	bl	80016b8 <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5d 	bl	8001664 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff31 	bl	8001628 <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa2 	bl	8001720 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017f4:	f7ff feb6 	bl	8001564 <HAL_GetTick>
 80017f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d008      	beq.n	8001818 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2280      	movs	r2, #128	; 0x80
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e052      	b.n	80018be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0216 	bic.w	r2, r2, #22
 8001826:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001836:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	2b00      	cmp	r3, #0
 800183e:	d103      	bne.n	8001848 <HAL_DMA_Abort+0x62>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001844:	2b00      	cmp	r3, #0
 8001846:	d007      	beq.n	8001858 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0208 	bic.w	r2, r2, #8
 8001856:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001868:	e013      	b.n	8001892 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800186a:	f7ff fe7b 	bl	8001564 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b05      	cmp	r3, #5
 8001876:	d90c      	bls.n	8001892 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2220      	movs	r2, #32
 800187c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2203      	movs	r2, #3
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e015      	b.n	80018be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1e4      	bne.n	800186a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a4:	223f      	movs	r2, #63	; 0x3f
 80018a6:	409a      	lsls	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d004      	beq.n	80018e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2280      	movs	r2, #128	; 0x80
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e00c      	b.n	80018fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2205      	movs	r2, #5
 80018e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 0201 	bic.w	r2, r2, #1
 80018fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e159      	b.n	8001bdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	429a      	cmp	r2, r3
 8001942:	f040 8148 	bne.w	8001bd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d005      	beq.n	800195e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195a:	2b02      	cmp	r3, #2
 800195c:	d130      	bne.n	80019c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 0201 	and.w	r2, r3, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d017      	beq.n	80019fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d123      	bne.n	8001a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	69b9      	ldr	r1, [r7, #24]
 8001a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a2 	beq.w	8001bd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aae:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_GPIO_Init+0x2ec>)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a49      	ldr	r2, [pc, #292]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d019      	beq.n	8001b0e <HAL_GPIO_Init+0x202>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_GPIO_Init+0x2f4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0x1fe>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a47      	ldr	r2, [pc, #284]	; (8001c04 <HAL_GPIO_Init+0x2f8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_Init+0x1fa>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <HAL_GPIO_Init+0x2fc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_Init+0x1f6>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a45      	ldr	r2, [pc, #276]	; (8001c0c <HAL_GPIO_Init+0x300>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_Init+0x1f2>
 8001afa:	2304      	movs	r3, #4
 8001afc:	e008      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f002 0203 	and.w	r2, r2, #3
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b20:	4935      	ldr	r1, [pc, #212]	; (8001bf8 <HAL_GPIO_Init+0x2ec>)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2e:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b52:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b7c:	4a24      	ldr	r2, [pc, #144]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba6:	4a1a      	ldr	r2, [pc, #104]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	f67f aea2 	bls.w	8001928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40013c00 	.word	0x40013c00

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b085      	sub	sp, #20
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c58:	887a      	ldrh	r2, [r7, #2]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	041a      	lsls	r2, r3, #16
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43d9      	mvns	r1, r3
 8001c64:	887b      	ldrh	r3, [r7, #2]
 8001c66:	400b      	ands	r3, r1
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	619a      	str	r2, [r3, #24]
}
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e267      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d075      	beq.n	8001d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c9a:	4b88      	ldr	r3, [pc, #544]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d00c      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca6:	4b85      	ldr	r3, [pc, #532]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	d112      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb2:	4b82      	ldr	r3, [pc, #520]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc0:	4b7e      	ldr	r3, [pc, #504]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d05b      	beq.n	8001d84 <HAL_RCC_OscConfig+0x108>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d157      	bne.n	8001d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e242      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce0:	d106      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x74>
 8001ce2:	4b76      	ldr	r3, [pc, #472]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a75      	ldr	r2, [pc, #468]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	e01d      	b.n	8001d2c <HAL_RCC_OscConfig+0xb0>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x98>
 8001cfa:	4b70      	ldr	r3, [pc, #448]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a6f      	ldr	r2, [pc, #444]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b6d      	ldr	r3, [pc, #436]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a6c      	ldr	r2, [pc, #432]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e00b      	b.n	8001d2c <HAL_RCC_OscConfig+0xb0>
 8001d14:	4b69      	ldr	r3, [pc, #420]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a68      	ldr	r2, [pc, #416]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b66      	ldr	r3, [pc, #408]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a65      	ldr	r2, [pc, #404]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d013      	beq.n	8001d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fc16 	bl	8001564 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fc12 	bl	8001564 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e207      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b5b      	ldr	r3, [pc, #364]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0xc0>
 8001d5a:	e014      	b.n	8001d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fc02 	bl	8001564 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff fbfe 	bl	8001564 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e1f3      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	4b51      	ldr	r3, [pc, #324]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_OscConfig+0xe8>
 8001d82:	e000      	b.n	8001d86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d063      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d92:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00b      	beq.n	8001db6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d11c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001daa:	4b44      	ldr	r3, [pc, #272]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d116      	bne.n	8001de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d005      	beq.n	8001dce <HAL_RCC_OscConfig+0x152>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e1c7      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dce:	4b3b      	ldr	r3, [pc, #236]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4937      	ldr	r1, [pc, #220]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	e03a      	b.n	8001e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dec:	4b34      	ldr	r3, [pc, #208]	; (8001ec0 <HAL_RCC_OscConfig+0x244>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df2:	f7ff fbb7 	bl	8001564 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dfa:	f7ff fbb3 	bl	8001564 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e1a8      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0c:	4b2b      	ldr	r3, [pc, #172]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e18:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	4925      	ldr	r1, [pc, #148]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
 8001e2c:	e015      	b.n	8001e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e2e:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <HAL_RCC_OscConfig+0x244>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff fb96 	bl	8001564 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fb92 	bl	8001564 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e187      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d036      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d016      	beq.n	8001e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_RCC_OscConfig+0x248>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e74:	f7ff fb76 	bl	8001564 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fb72 	bl	8001564 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e167      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_OscConfig+0x240>)
 8001e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0x200>
 8001e9a:	e01b      	b.n	8001ed4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_OscConfig+0x248>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff fb5f 	bl	8001564 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea8:	e00e      	b.n	8001ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eaa:	f7ff fb5b 	bl	8001564 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d907      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e150      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	42470000 	.word	0x42470000
 8001ec4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	4b88      	ldr	r3, [pc, #544]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ea      	bne.n	8001eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 8097 	beq.w	8002010 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee6:	4b81      	ldr	r3, [pc, #516]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10f      	bne.n	8001f12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	4b7d      	ldr	r3, [pc, #500]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a7c      	ldr	r2, [pc, #496]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b7a      	ldr	r3, [pc, #488]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f12:	4b77      	ldr	r3, [pc, #476]	; (80020f0 <HAL_RCC_OscConfig+0x474>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d118      	bne.n	8001f50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1e:	4b74      	ldr	r3, [pc, #464]	; (80020f0 <HAL_RCC_OscConfig+0x474>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a73      	ldr	r2, [pc, #460]	; (80020f0 <HAL_RCC_OscConfig+0x474>)
 8001f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fb1b 	bl	8001564 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f32:	f7ff fb17 	bl	8001564 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e10c      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f44:	4b6a      	ldr	r3, [pc, #424]	; (80020f0 <HAL_RCC_OscConfig+0x474>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x2ea>
 8001f58:	4b64      	ldr	r3, [pc, #400]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a63      	ldr	r2, [pc, #396]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
 8001f64:	e01c      	b.n	8001fa0 <HAL_RCC_OscConfig+0x324>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x30c>
 8001f6e:	4b5f      	ldr	r3, [pc, #380]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a5e      	ldr	r2, [pc, #376]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	4b5c      	ldr	r3, [pc, #368]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a5b      	ldr	r2, [pc, #364]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x324>
 8001f88:	4b58      	ldr	r3, [pc, #352]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	4a57      	ldr	r2, [pc, #348]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f8e:	f023 0301 	bic.w	r3, r3, #1
 8001f92:	6713      	str	r3, [r2, #112]	; 0x70
 8001f94:	4b55      	ldr	r3, [pc, #340]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f98:	4a54      	ldr	r2, [pc, #336]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001f9a:	f023 0304 	bic.w	r3, r3, #4
 8001f9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d015      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fadc 	bl	8001564 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff fad8 	bl	8001564 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e0cb      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc6:	4b49      	ldr	r3, [pc, #292]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0ee      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x334>
 8001fd2:	e014      	b.n	8001ffe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7ff fac6 	bl	8001564 <HAL_GetTick>
 8001fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fdc:	f7ff fac2 	bl	8001564 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e0b5      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff2:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8001ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1ee      	bne.n	8001fdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d105      	bne.n	8002010 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	4a38      	ldr	r2, [pc, #224]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 800200a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a1 	beq.w	800215c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800201a:	4b34      	ldr	r3, [pc, #208]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b08      	cmp	r3, #8
 8002024:	d05c      	beq.n	80020e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d141      	bne.n	80020b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202e:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCC_OscConfig+0x478>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fa96 	bl	8001564 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff fa92 	bl	8001564 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e087      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204e:	4b27      	ldr	r3, [pc, #156]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69da      	ldr	r2, [r3, #28]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	019b      	lsls	r3, r3, #6
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	085b      	lsrs	r3, r3, #1
 8002072:	3b01      	subs	r3, #1
 8002074:	041b      	lsls	r3, r3, #16
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	491b      	ldr	r1, [pc, #108]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x478>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7ff fa6b 	bl	8001564 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002092:	f7ff fa67 	bl	8001564 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e05c      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x416>
 80020b0:	e054      	b.n	800215c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_OscConfig+0x478>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7ff fa54 	bl	8001564 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c0:	f7ff fa50 	bl	8001564 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e045      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_RCC_OscConfig+0x470>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x444>
 80020de:	e03d      	b.n	800215c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e038      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40007000 	.word	0x40007000
 80020f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCC_OscConfig+0x4ec>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d028      	beq.n	8002158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d121      	bne.n	8002158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d11a      	bne.n	8002158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800212e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002130:	4293      	cmp	r3, r2
 8002132:	d111      	bne.n	8002158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	3b01      	subs	r3, #1
 8002142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d107      	bne.n	8002158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800

0800216c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0cc      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b68      	ldr	r3, [pc, #416]	; (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d90c      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b65      	ldr	r3, [pc, #404]	; (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b63      	ldr	r3, [pc, #396]	; (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0b8      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d020      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c0:	4b59      	ldr	r3, [pc, #356]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4a58      	ldr	r2, [pc, #352]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d8:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a52      	ldr	r2, [pc, #328]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b50      	ldr	r3, [pc, #320]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	494d      	ldr	r1, [pc, #308]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d044      	beq.n	800228c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b47      	ldr	r3, [pc, #284]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d119      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e07f      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d003      	beq.n	800222a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002226:	2b03      	cmp	r3, #3
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b3f      	ldr	r3, [pc, #252]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e06f      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e067      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b37      	ldr	r3, [pc, #220]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4934      	ldr	r1, [pc, #208]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800225c:	f7ff f982 	bl	8001564 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7ff f97e 	bl	8001564 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e04f      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d20c      	bcs.n	80022b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b20      	ldr	r3, [pc, #128]	; (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e032      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4916      	ldr	r1, [pc, #88]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	490e      	ldr	r1, [pc, #56]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022f2:	f000 f821 	bl	8002338 <HAL_RCC_GetSysClockFreq>
 80022f6:	4602      	mov	r2, r0
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	490a      	ldr	r1, [pc, #40]	; (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	5ccb      	ldrb	r3, [r1, r3]
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	4a09      	ldr	r2, [pc, #36]	; (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800230e:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff f8e2 	bl	80014dc <HAL_InitTick>

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023c00 	.word	0x40023c00
 8002328:	40023800 	.word	0x40023800
 800232c:	0800505c 	.word	0x0800505c
 8002330:	20000010 	.word	0x20000010
 8002334:	20000014 	.word	0x20000014

08002338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800233c:	b094      	sub	sp, #80	; 0x50
 800233e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	647b      	str	r3, [r7, #68]	; 0x44
 8002344:	2300      	movs	r3, #0
 8002346:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002348:	2300      	movs	r3, #0
 800234a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800234c:	2300      	movs	r3, #0
 800234e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002350:	4b79      	ldr	r3, [pc, #484]	; (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b08      	cmp	r3, #8
 800235a:	d00d      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x40>
 800235c:	2b08      	cmp	r3, #8
 800235e:	f200 80e1 	bhi.w	8002524 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x34>
 8002366:	2b04      	cmp	r3, #4
 8002368:	d003      	beq.n	8002372 <HAL_RCC_GetSysClockFreq+0x3a>
 800236a:	e0db      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b73      	ldr	r3, [pc, #460]	; (800253c <HAL_RCC_GetSysClockFreq+0x204>)
 800236e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002370:	e0db      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002372:	4b73      	ldr	r3, [pc, #460]	; (8002540 <HAL_RCC_GetSysClockFreq+0x208>)
 8002374:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002376:	e0d8      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002378:	4b6f      	ldr	r3, [pc, #444]	; (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002380:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002382:	4b6d      	ldr	r3, [pc, #436]	; (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d063      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800238e:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	099b      	lsrs	r3, r3, #6
 8002394:	2200      	movs	r2, #0
 8002396:	63bb      	str	r3, [r7, #56]	; 0x38
 8002398:	63fa      	str	r2, [r7, #60]	; 0x3c
 800239a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30
 80023a2:	2300      	movs	r3, #0
 80023a4:	637b      	str	r3, [r7, #52]	; 0x34
 80023a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80023aa:	4622      	mov	r2, r4
 80023ac:	462b      	mov	r3, r5
 80023ae:	f04f 0000 	mov.w	r0, #0
 80023b2:	f04f 0100 	mov.w	r1, #0
 80023b6:	0159      	lsls	r1, r3, #5
 80023b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023bc:	0150      	lsls	r0, r2, #5
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4621      	mov	r1, r4
 80023c4:	1a51      	subs	r1, r2, r1
 80023c6:	6139      	str	r1, [r7, #16]
 80023c8:	4629      	mov	r1, r5
 80023ca:	eb63 0301 	sbc.w	r3, r3, r1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	f04f 0200 	mov.w	r2, #0
 80023d4:	f04f 0300 	mov.w	r3, #0
 80023d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023dc:	4659      	mov	r1, fp
 80023de:	018b      	lsls	r3, r1, #6
 80023e0:	4651      	mov	r1, sl
 80023e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023e6:	4651      	mov	r1, sl
 80023e8:	018a      	lsls	r2, r1, #6
 80023ea:	4651      	mov	r1, sl
 80023ec:	ebb2 0801 	subs.w	r8, r2, r1
 80023f0:	4659      	mov	r1, fp
 80023f2:	eb63 0901 	sbc.w	r9, r3, r1
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800240a:	4690      	mov	r8, r2
 800240c:	4699      	mov	r9, r3
 800240e:	4623      	mov	r3, r4
 8002410:	eb18 0303 	adds.w	r3, r8, r3
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	462b      	mov	r3, r5
 8002418:	eb49 0303 	adc.w	r3, r9, r3
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800242a:	4629      	mov	r1, r5
 800242c:	024b      	lsls	r3, r1, #9
 800242e:	4621      	mov	r1, r4
 8002430:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002434:	4621      	mov	r1, r4
 8002436:	024a      	lsls	r2, r1, #9
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800243e:	2200      	movs	r2, #0
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
 8002442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002444:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002448:	f7fe f8ee 	bl	8000628 <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4613      	mov	r3, r2
 8002452:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002454:	e058      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002456:	4b38      	ldr	r3, [pc, #224]	; (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	099b      	lsrs	r3, r3, #6
 800245c:	2200      	movs	r2, #0
 800245e:	4618      	mov	r0, r3
 8002460:	4611      	mov	r1, r2
 8002462:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002466:	623b      	str	r3, [r7, #32]
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
 800246c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002470:	4642      	mov	r2, r8
 8002472:	464b      	mov	r3, r9
 8002474:	f04f 0000 	mov.w	r0, #0
 8002478:	f04f 0100 	mov.w	r1, #0
 800247c:	0159      	lsls	r1, r3, #5
 800247e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002482:	0150      	lsls	r0, r2, #5
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4641      	mov	r1, r8
 800248a:	ebb2 0a01 	subs.w	sl, r2, r1
 800248e:	4649      	mov	r1, r9
 8002490:	eb63 0b01 	sbc.w	fp, r3, r1
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024a8:	ebb2 040a 	subs.w	r4, r2, sl
 80024ac:	eb63 050b 	sbc.w	r5, r3, fp
 80024b0:	f04f 0200 	mov.w	r2, #0
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	00eb      	lsls	r3, r5, #3
 80024ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024be:	00e2      	lsls	r2, r4, #3
 80024c0:	4614      	mov	r4, r2
 80024c2:	461d      	mov	r5, r3
 80024c4:	4643      	mov	r3, r8
 80024c6:	18e3      	adds	r3, r4, r3
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	464b      	mov	r3, r9
 80024cc:	eb45 0303 	adc.w	r3, r5, r3
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024de:	4629      	mov	r1, r5
 80024e0:	028b      	lsls	r3, r1, #10
 80024e2:	4621      	mov	r1, r4
 80024e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024e8:	4621      	mov	r1, r4
 80024ea:	028a      	lsls	r2, r1, #10
 80024ec:	4610      	mov	r0, r2
 80024ee:	4619      	mov	r1, r3
 80024f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f2:	2200      	movs	r2, #0
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	61fa      	str	r2, [r7, #28]
 80024f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024fc:	f7fe f894 	bl	8000628 <__aeabi_uldivmod>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4613      	mov	r3, r2
 8002506:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <HAL_RCC_GetSysClockFreq+0x200>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	0c1b      	lsrs	r3, r3, #16
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	3301      	adds	r3, #1
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002518:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800251a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002522:	e002      	b.n	800252a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_RCC_GetSysClockFreq+0x204>)
 8002526:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800252c:	4618      	mov	r0, r3
 800252e:	3750      	adds	r7, #80	; 0x50
 8002530:	46bd      	mov	sp, r7
 8002532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002536:	bf00      	nop
 8002538:	40023800 	.word	0x40023800
 800253c:	00f42400 	.word	0x00f42400
 8002540:	007a1200 	.word	0x007a1200

08002544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b03      	ldr	r3, [pc, #12]	; (8002558 <HAL_RCC_GetHCLKFreq+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	20000010 	.word	0x20000010

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002560:	f7ff fff0 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0a9b      	lsrs	r3, r3, #10
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4903      	ldr	r1, [pc, #12]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40023800 	.word	0x40023800
 8002580:	0800506c 	.word	0x0800506c

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002588:	f7ff ffdc 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0b5b      	lsrs	r3, r3, #13
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4903      	ldr	r1, [pc, #12]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800
 80025a8:	0800506c 	.word	0x0800506c

080025ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e041      	b.n	8002642 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d106      	bne.n	80025d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7fe fdc8 	bl	8001168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f000 fd26 	bl	800303c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e041      	b.n	80026e0 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d106      	bne.n	8002676 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f839 	bl	80026e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	3304      	adds	r3, #4
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f000 fcd7 	bl	800303c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d104      	bne.n	800271a <HAL_TIM_IC_Start_IT+0x1e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002716:	b2db      	uxtb	r3, r3
 8002718:	e013      	b.n	8002742 <HAL_TIM_IC_Start_IT+0x46>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b04      	cmp	r3, #4
 800271e:	d104      	bne.n	800272a <HAL_TIM_IC_Start_IT+0x2e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002726:	b2db      	uxtb	r3, r3
 8002728:	e00b      	b.n	8002742 <HAL_TIM_IC_Start_IT+0x46>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d104      	bne.n	800273a <HAL_TIM_IC_Start_IT+0x3e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002736:	b2db      	uxtb	r3, r3
 8002738:	e003      	b.n	8002742 <HAL_TIM_IC_Start_IT+0x46>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002740:	b2db      	uxtb	r3, r3
 8002742:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <HAL_TIM_IC_Start_IT+0x58>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e013      	b.n	800277c <HAL_TIM_IC_Start_IT+0x80>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b04      	cmp	r3, #4
 8002758:	d104      	bne.n	8002764 <HAL_TIM_IC_Start_IT+0x68>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002760:	b2db      	uxtb	r3, r3
 8002762:	e00b      	b.n	800277c <HAL_TIM_IC_Start_IT+0x80>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b08      	cmp	r3, #8
 8002768:	d104      	bne.n	8002774 <HAL_TIM_IC_Start_IT+0x78>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002770:	b2db      	uxtb	r3, r3
 8002772:	e003      	b.n	800277c <HAL_TIM_IC_Start_IT+0x80>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800277a:	b2db      	uxtb	r3, r3
 800277c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800277e:	7bbb      	ldrb	r3, [r7, #14]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d102      	bne.n	800278a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002784:	7b7b      	ldrb	r3, [r7, #13]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e0c2      	b.n	8002914 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d104      	bne.n	800279e <HAL_TIM_IC_Start_IT+0xa2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800279c:	e013      	b.n	80027c6 <HAL_TIM_IC_Start_IT+0xca>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b04      	cmp	r3, #4
 80027a2:	d104      	bne.n	80027ae <HAL_TIM_IC_Start_IT+0xb2>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ac:	e00b      	b.n	80027c6 <HAL_TIM_IC_Start_IT+0xca>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d104      	bne.n	80027be <HAL_TIM_IC_Start_IT+0xc2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027bc:	e003      	b.n	80027c6 <HAL_TIM_IC_Start_IT+0xca>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d104      	bne.n	80027d6 <HAL_TIM_IC_Start_IT+0xda>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d4:	e013      	b.n	80027fe <HAL_TIM_IC_Start_IT+0x102>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d104      	bne.n	80027e6 <HAL_TIM_IC_Start_IT+0xea>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027e4:	e00b      	b.n	80027fe <HAL_TIM_IC_Start_IT+0x102>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d104      	bne.n	80027f6 <HAL_TIM_IC_Start_IT+0xfa>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027f4:	e003      	b.n	80027fe <HAL_TIM_IC_Start_IT+0x102>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b0c      	cmp	r3, #12
 8002802:	d841      	bhi.n	8002888 <HAL_TIM_IC_Start_IT+0x18c>
 8002804:	a201      	add	r2, pc, #4	; (adr r2, 800280c <HAL_TIM_IC_Start_IT+0x110>)
 8002806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280a:	bf00      	nop
 800280c:	08002841 	.word	0x08002841
 8002810:	08002889 	.word	0x08002889
 8002814:	08002889 	.word	0x08002889
 8002818:	08002889 	.word	0x08002889
 800281c:	08002853 	.word	0x08002853
 8002820:	08002889 	.word	0x08002889
 8002824:	08002889 	.word	0x08002889
 8002828:	08002889 	.word	0x08002889
 800282c:	08002865 	.word	0x08002865
 8002830:	08002889 	.word	0x08002889
 8002834:	08002889 	.word	0x08002889
 8002838:	08002889 	.word	0x08002889
 800283c:	08002877 	.word	0x08002877
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0202 	orr.w	r2, r2, #2
 800284e:	60da      	str	r2, [r3, #12]
      break;
 8002850:	e01d      	b.n	800288e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0204 	orr.w	r2, r2, #4
 8002860:	60da      	str	r2, [r3, #12]
      break;
 8002862:	e014      	b.n	800288e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0208 	orr.w	r2, r2, #8
 8002872:	60da      	str	r2, [r3, #12]
      break;
 8002874:	e00b      	b.n	800288e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0210 	orr.w	r2, r2, #16
 8002884:	60da      	str	r2, [r3, #12]
      break;
 8002886:	e002      	b.n	800288e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	bf00      	nop
  }

  if (status == HAL_OK)
 800288e:	7bfb      	ldrb	r3, [r7, #15]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d13e      	bne.n	8002912 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2201      	movs	r2, #1
 800289a:	6839      	ldr	r1, [r7, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f000 fe05 	bl	80034ac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a1d      	ldr	r2, [pc, #116]	; (800291c <HAL_TIM_IC_Start_IT+0x220>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d018      	beq.n	80028de <HAL_TIM_IC_Start_IT+0x1e2>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b4:	d013      	beq.n	80028de <HAL_TIM_IC_Start_IT+0x1e2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a19      	ldr	r2, [pc, #100]	; (8002920 <HAL_TIM_IC_Start_IT+0x224>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00e      	beq.n	80028de <HAL_TIM_IC_Start_IT+0x1e2>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a17      	ldr	r2, [pc, #92]	; (8002924 <HAL_TIM_IC_Start_IT+0x228>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d009      	beq.n	80028de <HAL_TIM_IC_Start_IT+0x1e2>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a16      	ldr	r2, [pc, #88]	; (8002928 <HAL_TIM_IC_Start_IT+0x22c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d004      	beq.n	80028de <HAL_TIM_IC_Start_IT+0x1e2>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a14      	ldr	r2, [pc, #80]	; (800292c <HAL_TIM_IC_Start_IT+0x230>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d111      	bne.n	8002902 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b06      	cmp	r3, #6
 80028ee:	d010      	beq.n	8002912 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002900:	e007      	b.n	8002912 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0201 	orr.w	r2, r2, #1
 8002910:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002912:	7bfb      	ldrb	r3, [r7, #15]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40010000 	.word	0x40010000
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800
 8002928:	40000c00 	.word	0x40000c00
 800292c:	40014000 	.word	0x40014000

08002930 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b0c      	cmp	r3, #12
 8002942:	d841      	bhi.n	80029c8 <HAL_TIM_IC_Stop_IT+0x98>
 8002944:	a201      	add	r2, pc, #4	; (adr r2, 800294c <HAL_TIM_IC_Stop_IT+0x1c>)
 8002946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294a:	bf00      	nop
 800294c:	08002981 	.word	0x08002981
 8002950:	080029c9 	.word	0x080029c9
 8002954:	080029c9 	.word	0x080029c9
 8002958:	080029c9 	.word	0x080029c9
 800295c:	08002993 	.word	0x08002993
 8002960:	080029c9 	.word	0x080029c9
 8002964:	080029c9 	.word	0x080029c9
 8002968:	080029c9 	.word	0x080029c9
 800296c:	080029a5 	.word	0x080029a5
 8002970:	080029c9 	.word	0x080029c9
 8002974:	080029c9 	.word	0x080029c9
 8002978:	080029c9 	.word	0x080029c9
 800297c:	080029b7 	.word	0x080029b7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0202 	bic.w	r2, r2, #2
 800298e:	60da      	str	r2, [r3, #12]
      break;
 8002990:	e01d      	b.n	80029ce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0204 	bic.w	r2, r2, #4
 80029a0:	60da      	str	r2, [r3, #12]
      break;
 80029a2:	e014      	b.n	80029ce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0208 	bic.w	r2, r2, #8
 80029b2:	60da      	str	r2, [r3, #12]
      break;
 80029b4:	e00b      	b.n	80029ce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0210 	bic.w	r2, r2, #16
 80029c4:	60da      	str	r2, [r3, #12]
      break;
 80029c6:	e002      	b.n	80029ce <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      break;
 80029cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d156      	bne.n	8002a82 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2200      	movs	r2, #0
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fd65 	bl	80034ac <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6a1a      	ldr	r2, [r3, #32]
 80029e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <HAL_TIM_IC_Stop_IT+0xe2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6a1a      	ldr	r2, [r3, #32]
 80029f8:	f240 4344 	movw	r3, #1092	; 0x444
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d107      	bne.n	8002a12 <HAL_TIM_IC_Stop_IT+0xe2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d104      	bne.n	8002a22 <HAL_TIM_IC_Stop_IT+0xf2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a20:	e013      	b.n	8002a4a <HAL_TIM_IC_Stop_IT+0x11a>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d104      	bne.n	8002a32 <HAL_TIM_IC_Stop_IT+0x102>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a30:	e00b      	b.n	8002a4a <HAL_TIM_IC_Stop_IT+0x11a>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d104      	bne.n	8002a42 <HAL_TIM_IC_Stop_IT+0x112>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a40:	e003      	b.n	8002a4a <HAL_TIM_IC_Stop_IT+0x11a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d104      	bne.n	8002a5a <HAL_TIM_IC_Stop_IT+0x12a>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a58:	e013      	b.n	8002a82 <HAL_TIM_IC_Stop_IT+0x152>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d104      	bne.n	8002a6a <HAL_TIM_IC_Stop_IT+0x13a>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a68:	e00b      	b.n	8002a82 <HAL_TIM_IC_Stop_IT+0x152>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d104      	bne.n	8002a7a <HAL_TIM_IC_Stop_IT+0x14a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a78:	e003      	b.n	8002a82 <HAL_TIM_IC_Stop_IT+0x152>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d122      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d11b      	bne.n	8002ae8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0202 	mvn.w	r2, #2
 8002ab8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe f9c2 	bl	8000e58 <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 fa92 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fa99 	bl	8003014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	f003 0304 	and.w	r3, r3, #4
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d122      	bne.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d11b      	bne.n	8002b3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0204 	mvn.w	r2, #4
 8002b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7fe f998 	bl	8000e58 <HAL_TIM_IC_CaptureCallback>
 8002b28:	e005      	b.n	8002b36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fa68 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 fa6f 	bl	8003014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d122      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	d11b      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0208 	mvn.w	r2, #8
 8002b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2204      	movs	r2, #4
 8002b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe f96e 	bl	8000e58 <HAL_TIM_IC_CaptureCallback>
 8002b7c:	e005      	b.n	8002b8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fa3e 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fa45 	bl	8003014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d122      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	2b10      	cmp	r3, #16
 8002baa:	d11b      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f06f 0210 	mvn.w	r2, #16
 8002bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2208      	movs	r2, #8
 8002bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fe f944 	bl	8000e58 <HAL_TIM_IC_CaptureCallback>
 8002bd0:	e005      	b.n	8002bde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 fa14 	bl	8003000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fa1b 	bl	8003014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10e      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d107      	bne.n	8002c10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f06f 0201 	mvn.w	r2, #1
 8002c08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f9ee 	bl	8002fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1a:	2b80      	cmp	r3, #128	; 0x80
 8002c1c:	d10e      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c28:	2b80      	cmp	r3, #128	; 0x80
 8002c2a:	d107      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fcd6 	bl	80035e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	d10e      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c54:	2b40      	cmp	r3, #64	; 0x40
 8002c56:	d107      	bne.n	8002c68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f9e0 	bl	8003028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b20      	cmp	r3, #32
 8002c74:	d10e      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d107      	bne.n	8002c94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f06f 0220 	mvn.w	r2, #32
 8002c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fca0 	bl	80035d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_TIM_IC_ConfigChannel+0x1e>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e088      	b.n	8002dcc <HAL_TIM_IC_ConfigChannel+0x130>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d11b      	bne.n	8002d00 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	6819      	ldr	r1, [r3, #0]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f000 fa30 	bl	800313c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 020c 	bic.w	r2, r2, #12
 8002cea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6999      	ldr	r1, [r3, #24]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	619a      	str	r2, [r3, #24]
 8002cfe:	e060      	b.n	8002dc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d11c      	bne.n	8002d40 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6819      	ldr	r1, [r3, #0]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f000 faa8 	bl	800326a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699a      	ldr	r2, [r3, #24]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d28:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6999      	ldr	r1, [r3, #24]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	021a      	lsls	r2, r3, #8
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	619a      	str	r2, [r3, #24]
 8002d3e:	e040      	b.n	8002dc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d11b      	bne.n	8002d7e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6818      	ldr	r0, [r3, #0]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f000 faf5 	bl	8003344 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69da      	ldr	r2, [r3, #28]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 020c 	bic.w	r2, r2, #12
 8002d68:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69d9      	ldr	r1, [r3, #28]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	61da      	str	r2, [r3, #28]
 8002d7c:	e021      	b.n	8002dc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	d11c      	bne.n	8002dbe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f000 fb12 	bl	80033bc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002da6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	69d9      	ldr	r1, [r3, #28]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	021a      	lsls	r2, r3, #8
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	430a      	orrs	r2, r1
 8002dba:	61da      	str	r2, [r3, #28]
 8002dbc:	e001      	b.n	8002dc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d101      	bne.n	8002df0 <HAL_TIM_ConfigClockSource+0x1c>
 8002dec:	2302      	movs	r3, #2
 8002dee:	e0b4      	b.n	8002f5a <HAL_TIM_ConfigClockSource+0x186>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68ba      	ldr	r2, [r7, #8]
 8002e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e28:	d03e      	beq.n	8002ea8 <HAL_TIM_ConfigClockSource+0xd4>
 8002e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2e:	f200 8087 	bhi.w	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e36:	f000 8086 	beq.w	8002f46 <HAL_TIM_ConfigClockSource+0x172>
 8002e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e3e:	d87f      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e40:	2b70      	cmp	r3, #112	; 0x70
 8002e42:	d01a      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0xa6>
 8002e44:	2b70      	cmp	r3, #112	; 0x70
 8002e46:	d87b      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e48:	2b60      	cmp	r3, #96	; 0x60
 8002e4a:	d050      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x11a>
 8002e4c:	2b60      	cmp	r3, #96	; 0x60
 8002e4e:	d877      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e50:	2b50      	cmp	r3, #80	; 0x50
 8002e52:	d03c      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0xfa>
 8002e54:	2b50      	cmp	r3, #80	; 0x50
 8002e56:	d873      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e58:	2b40      	cmp	r3, #64	; 0x40
 8002e5a:	d058      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x13a>
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	d86f      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e60:	2b30      	cmp	r3, #48	; 0x30
 8002e62:	d064      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x15a>
 8002e64:	2b30      	cmp	r3, #48	; 0x30
 8002e66:	d86b      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	d060      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x15a>
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d867      	bhi.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d05c      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x15a>
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d05a      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0x15a>
 8002e78:	e062      	b.n	8002f40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6899      	ldr	r1, [r3, #8]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	f000 faef 	bl	800346c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	609a      	str	r2, [r3, #8]
      break;
 8002ea6:	e04f      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6899      	ldr	r1, [r3, #8]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f000 fad8 	bl	800346c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002eca:	609a      	str	r2, [r3, #8]
      break;
 8002ecc:	e03c      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	461a      	mov	r2, r3
 8002edc:	f000 f996 	bl	800320c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2150      	movs	r1, #80	; 0x50
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 faa5 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 8002eec:	e02c      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f000 f9f2 	bl	80032e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2160      	movs	r1, #96	; 0x60
 8002f06:	4618      	mov	r0, r3
 8002f08:	f000 fa95 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 8002f0c:	e01c      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6859      	ldr	r1, [r3, #4]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f000 f976 	bl	800320c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2140      	movs	r1, #64	; 0x40
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 fa85 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 8002f2c:	e00c      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4619      	mov	r1, r3
 8002f38:	4610      	mov	r0, r2
 8002f3a:	f000 fa7c 	bl	8003436 <TIM_ITRx_SetConfig>
      break;
 8002f3e:	e003      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      break;
 8002f44:	e000      	b.n	8002f48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b0c      	cmp	r3, #12
 8002f76:	d831      	bhi.n	8002fdc <HAL_TIM_ReadCapturedValue+0x78>
 8002f78:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7e:	bf00      	nop
 8002f80:	08002fb5 	.word	0x08002fb5
 8002f84:	08002fdd 	.word	0x08002fdd
 8002f88:	08002fdd 	.word	0x08002fdd
 8002f8c:	08002fdd 	.word	0x08002fdd
 8002f90:	08002fbf 	.word	0x08002fbf
 8002f94:	08002fdd 	.word	0x08002fdd
 8002f98:	08002fdd 	.word	0x08002fdd
 8002f9c:	08002fdd 	.word	0x08002fdd
 8002fa0:	08002fc9 	.word	0x08002fc9
 8002fa4:	08002fdd 	.word	0x08002fdd
 8002fa8:	08002fdd 	.word	0x08002fdd
 8002fac:	08002fdd 	.word	0x08002fdd
 8002fb0:	08002fd3 	.word	0x08002fd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	60fb      	str	r3, [r7, #12]

      break;
 8002fbc:	e00f      	b.n	8002fde <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	60fb      	str	r3, [r7, #12]

      break;
 8002fc6:	e00a      	b.n	8002fde <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fce:	60fb      	str	r3, [r7, #12]

      break;
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	60fb      	str	r3, [r7, #12]

      break;
 8002fda:	e000      	b.n	8002fde <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002fdc:	bf00      	nop
  }

  return tmpreg;
 8002fde:	68fb      	ldr	r3, [r7, #12]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a34      	ldr	r2, [pc, #208]	; (8003120 <TIM_Base_SetConfig+0xe4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d00f      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305a:	d00b      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a31      	ldr	r2, [pc, #196]	; (8003124 <TIM_Base_SetConfig+0xe8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a30      	ldr	r2, [pc, #192]	; (8003128 <TIM_Base_SetConfig+0xec>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_Base_SetConfig+0x38>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a2f      	ldr	r2, [pc, #188]	; (800312c <TIM_Base_SetConfig+0xf0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d108      	bne.n	8003086 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a25      	ldr	r2, [pc, #148]	; (8003120 <TIM_Base_SetConfig+0xe4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d01b      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003094:	d017      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a22      	ldr	r2, [pc, #136]	; (8003124 <TIM_Base_SetConfig+0xe8>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d013      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a21      	ldr	r2, [pc, #132]	; (8003128 <TIM_Base_SetConfig+0xec>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d00f      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a20      	ldr	r2, [pc, #128]	; (800312c <TIM_Base_SetConfig+0xf0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00b      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a1f      	ldr	r2, [pc, #124]	; (8003130 <TIM_Base_SetConfig+0xf4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d007      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <TIM_Base_SetConfig+0xf8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d003      	beq.n	80030c6 <TIM_Base_SetConfig+0x8a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a1d      	ldr	r2, [pc, #116]	; (8003138 <TIM_Base_SetConfig+0xfc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d108      	bne.n	80030d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <TIM_Base_SetConfig+0xe4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d103      	bne.n	800310c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	615a      	str	r2, [r3, #20]
}
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40010000 	.word	0x40010000
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40014000 	.word	0x40014000
 8003134:	40014400 	.word	0x40014400
 8003138:	40014800 	.word	0x40014800

0800313c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f023 0201 	bic.w	r2, r3, #1
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <TIM_TI1_SetConfig+0xbc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <TIM_TI1_SetConfig+0x56>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003170:	d00f      	beq.n	8003192 <TIM_TI1_SetConfig+0x56>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a21      	ldr	r2, [pc, #132]	; (80031fc <TIM_TI1_SetConfig+0xc0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00b      	beq.n	8003192 <TIM_TI1_SetConfig+0x56>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a20      	ldr	r2, [pc, #128]	; (8003200 <TIM_TI1_SetConfig+0xc4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d007      	beq.n	8003192 <TIM_TI1_SetConfig+0x56>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <TIM_TI1_SetConfig+0xc8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d003      	beq.n	8003192 <TIM_TI1_SetConfig+0x56>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <TIM_TI1_SetConfig+0xcc>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <TIM_TI1_SetConfig+0x5a>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <TIM_TI1_SetConfig+0x5c>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	f023 0303 	bic.w	r3, r3, #3
 80031a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	e003      	b.n	80031b6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	f023 030a 	bic.w	r3, r3, #10
 80031d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f003 030a 	and.w	r3, r3, #10
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	4313      	orrs	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	621a      	str	r2, [r3, #32]
}
 80031ea:	bf00      	nop
 80031ec:	371c      	adds	r7, #28
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40010000 	.word	0x40010000
 80031fc:	40000400 	.word	0x40000400
 8003200:	40000800 	.word	0x40000800
 8003204:	40000c00 	.word	0x40000c00
 8003208:	40014000 	.word	0x40014000

0800320c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800320c:	b480      	push	{r7}
 800320e:	b087      	sub	sp, #28
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	f023 0201 	bic.w	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f023 030a 	bic.w	r3, r3, #10
 8003248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	621a      	str	r2, [r3, #32]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800326a:	b480      	push	{r7}
 800326c:	b087      	sub	sp, #28
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
 8003276:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	f023 0210 	bic.w	r2, r3, #16
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003296:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	021b      	lsls	r3, r3, #8
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	031b      	lsls	r3, r3, #12
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	621a      	str	r2, [r3, #32]
}
 80032d8:	bf00      	nop
 80032da:	371c      	adds	r7, #28
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f023 0210 	bic.w	r2, r3, #16
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800330e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	031b      	lsls	r3, r3, #12
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003320:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	621a      	str	r2, [r3, #32]
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f023 0303 	bic.w	r3, r3, #3
 8003370:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003380:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	b2db      	uxtb	r3, r3
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	4313      	orrs	r3, r2
 800338c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003394:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	621a      	str	r2, [r3, #32]
}
 80033b0:	bf00      	nop
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	031b      	lsls	r3, r3, #12
 8003400:	b29b      	uxth	r3, r3
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800340e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	031b      	lsls	r3, r3, #12
 8003414:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003436:	b480      	push	{r7}
 8003438:	b085      	sub	sp, #20
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4313      	orrs	r3, r2
 8003454:	f043 0307 	orr.w	r3, r3, #7
 8003458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800346c:	b480      	push	{r7}
 800346e:	b087      	sub	sp, #28
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	021a      	lsls	r2, r3, #8
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	431a      	orrs	r2, r3
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4313      	orrs	r3, r2
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	609a      	str	r2, [r3, #8]
}
 80034a0:	bf00      	nop
 80034a2:	371c      	adds	r7, #28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	2201      	movs	r2, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1a      	ldr	r2, [r3, #32]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	401a      	ands	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a1a      	ldr	r2, [r3, #32]
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f003 031f 	and.w	r3, r3, #31
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	431a      	orrs	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800350c:	2302      	movs	r3, #2
 800350e:	e050      	b.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d018      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355c:	d013      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00e      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a16      	ldr	r2, [pc, #88]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a15      	ldr	r2, [pc, #84]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d004      	beq.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d10c      	bne.n	80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800358c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	4313      	orrs	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40010000 	.word	0x40010000
 80035c4:	40000400 	.word	0x40000400
 80035c8:	40000800 	.word	0x40000800
 80035cc:	40000c00 	.word	0x40000c00
 80035d0:	40014000 	.word	0x40014000

080035d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e03f      	b.n	800368e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd fe04 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2224      	movs	r2, #36	; 0x24
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68da      	ldr	r2, [r3, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800363e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fddf 	bl	8004204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68da      	ldr	r2, [r3, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b08a      	sub	sp, #40	; 0x28
 800369a:	af02      	add	r7, sp, #8
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	4613      	mov	r3, r2
 80036a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d17c      	bne.n	80037b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_UART_Transmit+0x2c>
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e075      	b.n	80037b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Transmit+0x3e>
 80036d0:	2302      	movs	r3, #2
 80036d2:	e06e      	b.n	80037b2 <HAL_UART_Transmit+0x11c>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2221      	movs	r2, #33	; 0x21
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ea:	f7fd ff3b 	bl	8001564 <HAL_GetTick>
 80036ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	88fa      	ldrh	r2, [r7, #6]
 80036fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003704:	d108      	bne.n	8003718 <HAL_UART_Transmit+0x82>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e003      	b.n	8003720 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003728:	e02a      	b.n	8003780 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	2180      	movs	r1, #128	; 0x80
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fb1f 	bl	8003d78 <UART_WaitOnFlagUntilTimeout>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e036      	b.n	80037b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	3302      	adds	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e007      	b.n	8003772 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	3301      	adds	r3, #1
 8003770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1cf      	bne.n	800372a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2200      	movs	r2, #0
 8003792:	2140      	movs	r1, #64	; 0x40
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 faef 	bl	8003d78 <UART_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e006      	b.n	80037b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	e000      	b.n	80037b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
  }
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3720      	adds	r7, #32
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	4613      	mov	r3, r2
 80037c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	d11d      	bne.n	8003810 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_UART_Receive_IT+0x26>
 80037da:	88fb      	ldrh	r3, [r7, #6]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e016      	b.n	8003812 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Receive_IT+0x38>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e00f      	b.n	8003812 <HAL_UART_Receive_IT+0x58>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	461a      	mov	r2, r3
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 fb24 	bl	8003e54 <UART_Start_Receive_IT>
 800380c:	4603      	mov	r3, r0
 800380e:	e000      	b.n	8003812 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003810:	2302      	movs	r3, #2
  }
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b0ba      	sub	sp, #232	; 0xe8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800385a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003866:	f003 0320 	and.w	r3, r3, #32
 800386a:	2b00      	cmp	r3, #0
 800386c:	d009      	beq.n	8003882 <HAL_UART_IRQHandler+0x66>
 800386e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fc07 	bl	800408e <UART_Receive_IT>
      return;
 8003880:	e256      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 80de 	beq.w	8003a48 <HAL_UART_IRQHandler+0x22c>
 800388c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800389c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80d1 	beq.w	8003a48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_UART_IRQHandler+0xae>
 80038b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00b      	beq.n	80038ee <HAL_UART_IRQHandler+0xd2>
 80038d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d005      	beq.n	80038ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f043 0202 	orr.w	r2, r3, #2
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00b      	beq.n	8003912 <HAL_UART_IRQHandler+0xf6>
 80038fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f043 0204 	orr.w	r2, r3, #4
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d011      	beq.n	8003942 <HAL_UART_IRQHandler+0x126>
 800391e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d105      	bne.n	8003936 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800392a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393a:	f043 0208 	orr.w	r2, r3, #8
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 81ed 	beq.w	8003d26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800394c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_UART_IRQHandler+0x14e>
 8003958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fb92 	bl	800408e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d103      	bne.n	8003996 <HAL_UART_IRQHandler+0x17a>
 800398e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04f      	beq.n	8003a36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fa9a 	bl	8003ed0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a6:	2b40      	cmp	r3, #64	; 0x40
 80039a8:	d141      	bne.n	8003a2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3314      	adds	r3, #20
 80039b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80039c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3314      	adds	r3, #20
 80039d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1d9      	bne.n	80039aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d013      	beq.n	8003a26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	4a7d      	ldr	r2, [pc, #500]	; (8003bf8 <HAL_UART_IRQHandler+0x3dc>)
 8003a04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fd ff5b 	bl	80018c6 <HAL_DMA_Abort_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d016      	beq.n	8003a44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a20:	4610      	mov	r0, r2
 8003a22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a24:	e00e      	b.n	8003a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f990 	bl	8003d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a2c:	e00a      	b.n	8003a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f98c 	bl	8003d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a34:	e006      	b.n	8003a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f988 	bl	8003d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003a42:	e170      	b.n	8003d26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a44:	bf00      	nop
    return;
 8003a46:	e16e      	b.n	8003d26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	f040 814a 	bne.w	8003ce6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8143 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 813c 	beq.w	8003ce6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	f040 80b4 	bne.w	8003bfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003aa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8140 	beq.w	8003d2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	f080 8139 	bcs.w	8003d2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003abe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aca:	f000 8088 	beq.w	8003bde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	330c      	adds	r3, #12
 8003ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	330c      	adds	r3, #12
 8003af6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003afa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003b06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1d9      	bne.n	8003ace <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3314      	adds	r3, #20
 8003b20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b24:	e853 3f00 	ldrex	r3, [r3]
 8003b28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3314      	adds	r3, #20
 8003b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e1      	bne.n	8003b1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3314      	adds	r3, #20
 8003b5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b60:	e853 3f00 	ldrex	r3, [r3]
 8003b64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3314      	adds	r3, #20
 8003b76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b82:	e841 2300 	strex	r3, r2, [r1]
 8003b86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1e3      	bne.n	8003b56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bae:	f023 0310 	bic.w	r3, r3, #16
 8003bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003bc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003bc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc8:	e841 2300 	strex	r3, r2, [r1]
 8003bcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1e3      	bne.n	8003b9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd fe04 	bl	80017e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	4619      	mov	r1, r3
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f8b6 	bl	8003d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bf4:	e099      	b.n	8003d2a <HAL_UART_IRQHandler+0x50e>
 8003bf6:	bf00      	nop
 8003bf8:	08003f97 	.word	0x08003f97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 808b 	beq.w	8003d2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8086 	beq.w	8003d2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	330c      	adds	r3, #12
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	e853 3f00 	ldrex	r3, [r3]
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	330c      	adds	r3, #12
 8003c42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c46:	647a      	str	r2, [r7, #68]	; 0x44
 8003c48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e3      	bne.n	8003c22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3314      	adds	r3, #20
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	623b      	str	r3, [r7, #32]
   return(result);
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3314      	adds	r3, #20
 8003c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c7e:	633a      	str	r2, [r7, #48]	; 0x30
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e3      	bne.n	8003c5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	330c      	adds	r3, #12
 8003ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0310 	bic.w	r3, r3, #16
 8003cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	330c      	adds	r3, #12
 8003cc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003cc4:	61fa      	str	r2, [r7, #28]
 8003cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	69b9      	ldr	r1, [r7, #24]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e3      	bne.n	8003ca0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cdc:	4619      	mov	r1, r3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f83e 	bl	8003d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ce4:	e023      	b.n	8003d2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <HAL_UART_IRQHandler+0x4ea>
 8003cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f95d 	bl	8003fbe <UART_Transmit_IT>
    return;
 8003d04:	e014      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00e      	beq.n	8003d30 <HAL_UART_IRQHandler+0x514>
 8003d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d008      	beq.n	8003d30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f99d 	bl	800405e <UART_EndTransmit_IT>
    return;
 8003d24:	e004      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
    return;
 8003d26:	bf00      	nop
 8003d28:	e002      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
      return;
 8003d2a:	bf00      	nop
 8003d2c:	e000      	b.n	8003d30 <HAL_UART_IRQHandler+0x514>
      return;
 8003d2e:	bf00      	nop
  }
}
 8003d30:	37e8      	adds	r7, #232	; 0xe8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop

08003d38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b090      	sub	sp, #64	; 0x40
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d88:	e050      	b.n	8003e2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d90:	d04c      	beq.n	8003e2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d007      	beq.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d98:	f7fd fbe4 	bl	8001564 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d241      	bcs.n	8003e2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	330c      	adds	r3, #12
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	330c      	adds	r3, #12
 8003dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dc8:	637a      	str	r2, [r7, #52]	; 0x34
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	3314      	adds	r3, #20
 8003de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	613b      	str	r3, [r7, #16]
   return(result);
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f023 0301 	bic.w	r3, r3, #1
 8003df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3314      	adds	r3, #20
 8003dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dfc:	623a      	str	r2, [r7, #32]
 8003dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	69f9      	ldr	r1, [r7, #28]
 8003e02:	6a3a      	ldr	r2, [r7, #32]
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e00f      	b.n	8003e4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	4013      	ands	r3, r2
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	bf0c      	ite	eq
 8003e3c:	2301      	moveq	r3, #1
 8003e3e:	2300      	movne	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d09f      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3740      	adds	r7, #64	; 0x40
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	88fa      	ldrh	r2, [r7, #6]
 8003e6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	88fa      	ldrh	r2, [r7, #6]
 8003e72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2222      	movs	r2, #34	; 0x22
 8003e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d007      	beq.n	8003ea2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ea0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0201 	orr.w	r2, r2, #1
 8003eb0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0220 	orr.w	r2, r2, #32
 8003ec0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b095      	sub	sp, #84	; 0x54
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	330c      	adds	r3, #12
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	330c      	adds	r3, #12
 8003ef6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ef8:	643a      	str	r2, [r7, #64]	; 0x40
 8003efa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e5      	bne.n	8003ed8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3314      	adds	r3, #20
 8003f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3314      	adds	r3, #20
 8003f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d119      	bne.n	8003f7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f023 0310 	bic.w	r3, r3, #16
 8003f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f68:	61ba      	str	r2, [r7, #24]
 8003f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6979      	ldr	r1, [r7, #20]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	613b      	str	r3, [r7, #16]
   return(result);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e5      	bne.n	8003f48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f8a:	bf00      	nop
 8003f8c:	3754      	adds	r7, #84	; 0x54
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b084      	sub	sp, #16
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff fecb 	bl	8003d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b21      	cmp	r3, #33	; 0x21
 8003fd0:	d13e      	bne.n	8004050 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fda:	d114      	bne.n	8004006 <UART_Transmit_IT+0x48>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d110      	bne.n	8004006 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	881b      	ldrh	r3, [r3, #0]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	1c9a      	adds	r2, r3, #2
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	621a      	str	r2, [r3, #32]
 8004004:	e008      	b.n	8004018 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	1c59      	adds	r1, r3, #1
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6211      	str	r1, [r2, #32]
 8004010:	781a      	ldrb	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29b      	uxth	r3, r3
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4619      	mov	r1, r3
 8004026:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10f      	bne.n	800404c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800403a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	e000      	b.n	8004052 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004050:	2302      	movs	r3, #2
  }
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004074:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7ff fe5a 	bl	8003d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b08c      	sub	sp, #48	; 0x30
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b22      	cmp	r3, #34	; 0x22
 80040a0:	f040 80ab 	bne.w	80041fa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ac:	d117      	bne.n	80040de <UART_Receive_IT+0x50>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d113      	bne.n	80040de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040b6:	2300      	movs	r3, #0
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	1c9a      	adds	r2, r3, #2
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	629a      	str	r2, [r3, #40]	; 0x28
 80040dc:	e026      	b.n	800412c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f0:	d007      	beq.n	8004102 <UART_Receive_IT+0x74>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10a      	bne.n	8004110 <UART_Receive_IT+0x82>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	b2da      	uxtb	r2, r3
 800410a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e008      	b.n	8004122 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800411c:	b2da      	uxtb	r2, r3
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004130:	b29b      	uxth	r3, r3
 8004132:	3b01      	subs	r3, #1
 8004134:	b29b      	uxth	r3, r3
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	4619      	mov	r1, r3
 800413a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800413c:	2b00      	cmp	r3, #0
 800413e:	d15a      	bne.n	80041f6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0220 	bic.w	r2, r2, #32
 800414e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800415e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0201 	bic.w	r2, r2, #1
 800416e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417c:	2b01      	cmp	r3, #1
 800417e:	d135      	bne.n	80041ec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	330c      	adds	r3, #12
 800418c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	613b      	str	r3, [r7, #16]
   return(result);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f023 0310 	bic.w	r3, r3, #16
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	330c      	adds	r3, #12
 80041a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a6:	623a      	str	r2, [r7, #32]
 80041a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	69f9      	ldr	r1, [r7, #28]
 80041ac:	6a3a      	ldr	r2, [r7, #32]
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e5      	bne.n	8004186 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b10      	cmp	r3, #16
 80041c6:	d10a      	bne.n	80041de <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fdbb 	bl	8003d60 <HAL_UARTEx_RxEventCallback>
 80041ea:	e002      	b.n	80041f2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7fc fb9d 	bl	800092c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80041f2:	2300      	movs	r3, #0
 80041f4:	e002      	b.n	80041fc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e000      	b.n	80041fc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80041fa:	2302      	movs	r3, #2
  }
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3730      	adds	r7, #48	; 0x30
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004208:	b0c0      	sub	sp, #256	; 0x100
 800420a:	af00      	add	r7, sp, #0
 800420c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004220:	68d9      	ldr	r1, [r3, #12]
 8004222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	ea40 0301 	orr.w	r3, r0, r1
 800422c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	431a      	orrs	r2, r3
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	431a      	orrs	r2, r3
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800425c:	f021 010c 	bic.w	r1, r1, #12
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800426a:	430b      	orrs	r3, r1
 800426c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800426e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427e:	6999      	ldr	r1, [r3, #24]
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	ea40 0301 	orr.w	r3, r0, r1
 800428a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	4b8f      	ldr	r3, [pc, #572]	; (80044d0 <UART_SetConfig+0x2cc>)
 8004294:	429a      	cmp	r2, r3
 8004296:	d005      	beq.n	80042a4 <UART_SetConfig+0xa0>
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b8d      	ldr	r3, [pc, #564]	; (80044d4 <UART_SetConfig+0x2d0>)
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d104      	bne.n	80042ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042a4:	f7fe f96e 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 80042a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042ac:	e003      	b.n	80042b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ae:	f7fe f955 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 80042b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c0:	f040 810c 	bne.w	80044dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80042d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80042d6:	4622      	mov	r2, r4
 80042d8:	462b      	mov	r3, r5
 80042da:	1891      	adds	r1, r2, r2
 80042dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80042de:	415b      	adcs	r3, r3
 80042e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80042e6:	4621      	mov	r1, r4
 80042e8:	eb12 0801 	adds.w	r8, r2, r1
 80042ec:	4629      	mov	r1, r5
 80042ee:	eb43 0901 	adc.w	r9, r3, r1
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004306:	4690      	mov	r8, r2
 8004308:	4699      	mov	r9, r3
 800430a:	4623      	mov	r3, r4
 800430c:	eb18 0303 	adds.w	r3, r8, r3
 8004310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004314:	462b      	mov	r3, r5
 8004316:	eb49 0303 	adc.w	r3, r9, r3
 800431a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800432a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800432e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004332:	460b      	mov	r3, r1
 8004334:	18db      	adds	r3, r3, r3
 8004336:	653b      	str	r3, [r7, #80]	; 0x50
 8004338:	4613      	mov	r3, r2
 800433a:	eb42 0303 	adc.w	r3, r2, r3
 800433e:	657b      	str	r3, [r7, #84]	; 0x54
 8004340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004344:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004348:	f7fc f96e 	bl	8000628 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4b61      	ldr	r3, [pc, #388]	; (80044d8 <UART_SetConfig+0x2d4>)
 8004352:	fba3 2302 	umull	r2, r3, r3, r2
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	011c      	lsls	r4, r3, #4
 800435a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435e:	2200      	movs	r2, #0
 8004360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004364:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004368:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800436c:	4642      	mov	r2, r8
 800436e:	464b      	mov	r3, r9
 8004370:	1891      	adds	r1, r2, r2
 8004372:	64b9      	str	r1, [r7, #72]	; 0x48
 8004374:	415b      	adcs	r3, r3
 8004376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004378:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800437c:	4641      	mov	r1, r8
 800437e:	eb12 0a01 	adds.w	sl, r2, r1
 8004382:	4649      	mov	r1, r9
 8004384:	eb43 0b01 	adc.w	fp, r3, r1
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800439c:	4692      	mov	sl, r2
 800439e:	469b      	mov	fp, r3
 80043a0:	4643      	mov	r3, r8
 80043a2:	eb1a 0303 	adds.w	r3, sl, r3
 80043a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043aa:	464b      	mov	r3, r9
 80043ac:	eb4b 0303 	adc.w	r3, fp, r3
 80043b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043c8:	460b      	mov	r3, r1
 80043ca:	18db      	adds	r3, r3, r3
 80043cc:	643b      	str	r3, [r7, #64]	; 0x40
 80043ce:	4613      	mov	r3, r2
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	647b      	str	r3, [r7, #68]	; 0x44
 80043d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80043da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80043de:	f7fc f923 	bl	8000628 <__aeabi_uldivmod>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4611      	mov	r1, r2
 80043e8:	4b3b      	ldr	r3, [pc, #236]	; (80044d8 <UART_SetConfig+0x2d4>)
 80043ea:	fba3 2301 	umull	r2, r3, r3, r1
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2264      	movs	r2, #100	; 0x64
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	1acb      	subs	r3, r1, r3
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80043fe:	4b36      	ldr	r3, [pc, #216]	; (80044d8 <UART_SetConfig+0x2d4>)
 8004400:	fba3 2302 	umull	r2, r3, r3, r2
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800440c:	441c      	add	r4, r3
 800440e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004412:	2200      	movs	r2, #0
 8004414:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004418:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800441c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004420:	4642      	mov	r2, r8
 8004422:	464b      	mov	r3, r9
 8004424:	1891      	adds	r1, r2, r2
 8004426:	63b9      	str	r1, [r7, #56]	; 0x38
 8004428:	415b      	adcs	r3, r3
 800442a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800442c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004430:	4641      	mov	r1, r8
 8004432:	1851      	adds	r1, r2, r1
 8004434:	6339      	str	r1, [r7, #48]	; 0x30
 8004436:	4649      	mov	r1, r9
 8004438:	414b      	adcs	r3, r1
 800443a:	637b      	str	r3, [r7, #52]	; 0x34
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004448:	4659      	mov	r1, fp
 800444a:	00cb      	lsls	r3, r1, #3
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004452:	4651      	mov	r1, sl
 8004454:	00ca      	lsls	r2, r1, #3
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	4603      	mov	r3, r0
 800445c:	4642      	mov	r2, r8
 800445e:	189b      	adds	r3, r3, r2
 8004460:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004464:	464b      	mov	r3, r9
 8004466:	460a      	mov	r2, r1
 8004468:	eb42 0303 	adc.w	r3, r2, r3
 800446c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800447c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004480:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004484:	460b      	mov	r3, r1
 8004486:	18db      	adds	r3, r3, r3
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
 800448a:	4613      	mov	r3, r2
 800448c:	eb42 0303 	adc.w	r3, r2, r3
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004492:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004496:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800449a:	f7fc f8c5 	bl	8000628 <__aeabi_uldivmod>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <UART_SetConfig+0x2d4>)
 80044a4:	fba3 1302 	umull	r1, r3, r3, r2
 80044a8:	095b      	lsrs	r3, r3, #5
 80044aa:	2164      	movs	r1, #100	; 0x64
 80044ac:	fb01 f303 	mul.w	r3, r1, r3
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	3332      	adds	r3, #50	; 0x32
 80044b6:	4a08      	ldr	r2, [pc, #32]	; (80044d8 <UART_SetConfig+0x2d4>)
 80044b8:	fba2 2303 	umull	r2, r3, r2, r3
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	f003 0207 	and.w	r2, r3, #7
 80044c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4422      	add	r2, r4
 80044ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044cc:	e105      	b.n	80046da <UART_SetConfig+0x4d6>
 80044ce:	bf00      	nop
 80044d0:	40011000 	.word	0x40011000
 80044d4:	40011400 	.word	0x40011400
 80044d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80044ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80044ee:	4642      	mov	r2, r8
 80044f0:	464b      	mov	r3, r9
 80044f2:	1891      	adds	r1, r2, r2
 80044f4:	6239      	str	r1, [r7, #32]
 80044f6:	415b      	adcs	r3, r3
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
 80044fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044fe:	4641      	mov	r1, r8
 8004500:	1854      	adds	r4, r2, r1
 8004502:	4649      	mov	r1, r9
 8004504:	eb43 0501 	adc.w	r5, r3, r1
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	00eb      	lsls	r3, r5, #3
 8004512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004516:	00e2      	lsls	r2, r4, #3
 8004518:	4614      	mov	r4, r2
 800451a:	461d      	mov	r5, r3
 800451c:	4643      	mov	r3, r8
 800451e:	18e3      	adds	r3, r4, r3
 8004520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004524:	464b      	mov	r3, r9
 8004526:	eb45 0303 	adc.w	r3, r5, r3
 800452a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800452e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800453a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800454a:	4629      	mov	r1, r5
 800454c:	008b      	lsls	r3, r1, #2
 800454e:	4621      	mov	r1, r4
 8004550:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004554:	4621      	mov	r1, r4
 8004556:	008a      	lsls	r2, r1, #2
 8004558:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800455c:	f7fc f864 	bl	8000628 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4b60      	ldr	r3, [pc, #384]	; (80046e8 <UART_SetConfig+0x4e4>)
 8004566:	fba3 2302 	umull	r2, r3, r3, r2
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	011c      	lsls	r4, r3, #4
 800456e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004572:	2200      	movs	r2, #0
 8004574:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004578:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800457c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004580:	4642      	mov	r2, r8
 8004582:	464b      	mov	r3, r9
 8004584:	1891      	adds	r1, r2, r2
 8004586:	61b9      	str	r1, [r7, #24]
 8004588:	415b      	adcs	r3, r3
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004590:	4641      	mov	r1, r8
 8004592:	1851      	adds	r1, r2, r1
 8004594:	6139      	str	r1, [r7, #16]
 8004596:	4649      	mov	r1, r9
 8004598:	414b      	adcs	r3, r1
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	f04f 0200 	mov.w	r2, #0
 80045a0:	f04f 0300 	mov.w	r3, #0
 80045a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045a8:	4659      	mov	r1, fp
 80045aa:	00cb      	lsls	r3, r1, #3
 80045ac:	4651      	mov	r1, sl
 80045ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045b2:	4651      	mov	r1, sl
 80045b4:	00ca      	lsls	r2, r1, #3
 80045b6:	4610      	mov	r0, r2
 80045b8:	4619      	mov	r1, r3
 80045ba:	4603      	mov	r3, r0
 80045bc:	4642      	mov	r2, r8
 80045be:	189b      	adds	r3, r3, r2
 80045c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045c4:	464b      	mov	r3, r9
 80045c6:	460a      	mov	r2, r1
 80045c8:	eb42 0303 	adc.w	r3, r2, r3
 80045cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80045d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80045da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	f04f 0300 	mov.w	r3, #0
 80045e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80045e8:	4649      	mov	r1, r9
 80045ea:	008b      	lsls	r3, r1, #2
 80045ec:	4641      	mov	r1, r8
 80045ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045f2:	4641      	mov	r1, r8
 80045f4:	008a      	lsls	r2, r1, #2
 80045f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80045fa:	f7fc f815 	bl	8000628 <__aeabi_uldivmod>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	4b39      	ldr	r3, [pc, #228]	; (80046e8 <UART_SetConfig+0x4e4>)
 8004604:	fba3 1302 	umull	r1, r3, r3, r2
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	2164      	movs	r1, #100	; 0x64
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	3332      	adds	r3, #50	; 0x32
 8004616:	4a34      	ldr	r2, [pc, #208]	; (80046e8 <UART_SetConfig+0x4e4>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004622:	441c      	add	r4, r3
 8004624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004628:	2200      	movs	r2, #0
 800462a:	673b      	str	r3, [r7, #112]	; 0x70
 800462c:	677a      	str	r2, [r7, #116]	; 0x74
 800462e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004632:	4642      	mov	r2, r8
 8004634:	464b      	mov	r3, r9
 8004636:	1891      	adds	r1, r2, r2
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	415b      	adcs	r3, r3
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004642:	4641      	mov	r1, r8
 8004644:	1851      	adds	r1, r2, r1
 8004646:	6039      	str	r1, [r7, #0]
 8004648:	4649      	mov	r1, r9
 800464a:	414b      	adcs	r3, r1
 800464c:	607b      	str	r3, [r7, #4]
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800465a:	4659      	mov	r1, fp
 800465c:	00cb      	lsls	r3, r1, #3
 800465e:	4651      	mov	r1, sl
 8004660:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004664:	4651      	mov	r1, sl
 8004666:	00ca      	lsls	r2, r1, #3
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	4603      	mov	r3, r0
 800466e:	4642      	mov	r2, r8
 8004670:	189b      	adds	r3, r3, r2
 8004672:	66bb      	str	r3, [r7, #104]	; 0x68
 8004674:	464b      	mov	r3, r9
 8004676:	460a      	mov	r2, r1
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800467e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	663b      	str	r3, [r7, #96]	; 0x60
 8004688:	667a      	str	r2, [r7, #100]	; 0x64
 800468a:	f04f 0200 	mov.w	r2, #0
 800468e:	f04f 0300 	mov.w	r3, #0
 8004692:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004696:	4649      	mov	r1, r9
 8004698:	008b      	lsls	r3, r1, #2
 800469a:	4641      	mov	r1, r8
 800469c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a0:	4641      	mov	r1, r8
 80046a2:	008a      	lsls	r2, r1, #2
 80046a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046a8:	f7fb ffbe 	bl	8000628 <__aeabi_uldivmod>
 80046ac:	4602      	mov	r2, r0
 80046ae:	460b      	mov	r3, r1
 80046b0:	4b0d      	ldr	r3, [pc, #52]	; (80046e8 <UART_SetConfig+0x4e4>)
 80046b2:	fba3 1302 	umull	r1, r3, r3, r2
 80046b6:	095b      	lsrs	r3, r3, #5
 80046b8:	2164      	movs	r1, #100	; 0x64
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	011b      	lsls	r3, r3, #4
 80046c2:	3332      	adds	r3, #50	; 0x32
 80046c4:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <UART_SetConfig+0x4e4>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	f003 020f 	and.w	r2, r3, #15
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4422      	add	r2, r4
 80046d8:	609a      	str	r2, [r3, #8]
}
 80046da:	bf00      	nop
 80046dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80046e0:	46bd      	mov	sp, r7
 80046e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e6:	bf00      	nop
 80046e8:	51eb851f 	.word	0x51eb851f

080046ec <__errno>:
 80046ec:	4b01      	ldr	r3, [pc, #4]	; (80046f4 <__errno+0x8>)
 80046ee:	6818      	ldr	r0, [r3, #0]
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	2000001c 	.word	0x2000001c

080046f8 <__libc_init_array>:
 80046f8:	b570      	push	{r4, r5, r6, lr}
 80046fa:	4d0d      	ldr	r5, [pc, #52]	; (8004730 <__libc_init_array+0x38>)
 80046fc:	4c0d      	ldr	r4, [pc, #52]	; (8004734 <__libc_init_array+0x3c>)
 80046fe:	1b64      	subs	r4, r4, r5
 8004700:	10a4      	asrs	r4, r4, #2
 8004702:	2600      	movs	r6, #0
 8004704:	42a6      	cmp	r6, r4
 8004706:	d109      	bne.n	800471c <__libc_init_array+0x24>
 8004708:	4d0b      	ldr	r5, [pc, #44]	; (8004738 <__libc_init_array+0x40>)
 800470a:	4c0c      	ldr	r4, [pc, #48]	; (800473c <__libc_init_array+0x44>)
 800470c:	f000 fc8e 	bl	800502c <_init>
 8004710:	1b64      	subs	r4, r4, r5
 8004712:	10a4      	asrs	r4, r4, #2
 8004714:	2600      	movs	r6, #0
 8004716:	42a6      	cmp	r6, r4
 8004718:	d105      	bne.n	8004726 <__libc_init_array+0x2e>
 800471a:	bd70      	pop	{r4, r5, r6, pc}
 800471c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004720:	4798      	blx	r3
 8004722:	3601      	adds	r6, #1
 8004724:	e7ee      	b.n	8004704 <__libc_init_array+0xc>
 8004726:	f855 3b04 	ldr.w	r3, [r5], #4
 800472a:	4798      	blx	r3
 800472c:	3601      	adds	r6, #1
 800472e:	e7f2      	b.n	8004716 <__libc_init_array+0x1e>
 8004730:	080050b0 	.word	0x080050b0
 8004734:	080050b0 	.word	0x080050b0
 8004738:	080050b0 	.word	0x080050b0
 800473c:	080050b4 	.word	0x080050b4

08004740 <memset>:
 8004740:	4402      	add	r2, r0
 8004742:	4603      	mov	r3, r0
 8004744:	4293      	cmp	r3, r2
 8004746:	d100      	bne.n	800474a <memset+0xa>
 8004748:	4770      	bx	lr
 800474a:	f803 1b01 	strb.w	r1, [r3], #1
 800474e:	e7f9      	b.n	8004744 <memset+0x4>

08004750 <siprintf>:
 8004750:	b40e      	push	{r1, r2, r3}
 8004752:	b500      	push	{lr}
 8004754:	b09c      	sub	sp, #112	; 0x70
 8004756:	ab1d      	add	r3, sp, #116	; 0x74
 8004758:	9002      	str	r0, [sp, #8]
 800475a:	9006      	str	r0, [sp, #24]
 800475c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004760:	4809      	ldr	r0, [pc, #36]	; (8004788 <siprintf+0x38>)
 8004762:	9107      	str	r1, [sp, #28]
 8004764:	9104      	str	r1, [sp, #16]
 8004766:	4909      	ldr	r1, [pc, #36]	; (800478c <siprintf+0x3c>)
 8004768:	f853 2b04 	ldr.w	r2, [r3], #4
 800476c:	9105      	str	r1, [sp, #20]
 800476e:	6800      	ldr	r0, [r0, #0]
 8004770:	9301      	str	r3, [sp, #4]
 8004772:	a902      	add	r1, sp, #8
 8004774:	f000 f868 	bl	8004848 <_svfiprintf_r>
 8004778:	9b02      	ldr	r3, [sp, #8]
 800477a:	2200      	movs	r2, #0
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	b01c      	add	sp, #112	; 0x70
 8004780:	f85d eb04 	ldr.w	lr, [sp], #4
 8004784:	b003      	add	sp, #12
 8004786:	4770      	bx	lr
 8004788:	2000001c 	.word	0x2000001c
 800478c:	ffff0208 	.word	0xffff0208

08004790 <__ssputs_r>:
 8004790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004794:	688e      	ldr	r6, [r1, #8]
 8004796:	429e      	cmp	r6, r3
 8004798:	4682      	mov	sl, r0
 800479a:	460c      	mov	r4, r1
 800479c:	4690      	mov	r8, r2
 800479e:	461f      	mov	r7, r3
 80047a0:	d838      	bhi.n	8004814 <__ssputs_r+0x84>
 80047a2:	898a      	ldrh	r2, [r1, #12]
 80047a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047a8:	d032      	beq.n	8004810 <__ssputs_r+0x80>
 80047aa:	6825      	ldr	r5, [r4, #0]
 80047ac:	6909      	ldr	r1, [r1, #16]
 80047ae:	eba5 0901 	sub.w	r9, r5, r1
 80047b2:	6965      	ldr	r5, [r4, #20]
 80047b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047bc:	3301      	adds	r3, #1
 80047be:	444b      	add	r3, r9
 80047c0:	106d      	asrs	r5, r5, #1
 80047c2:	429d      	cmp	r5, r3
 80047c4:	bf38      	it	cc
 80047c6:	461d      	movcc	r5, r3
 80047c8:	0553      	lsls	r3, r2, #21
 80047ca:	d531      	bpl.n	8004830 <__ssputs_r+0xa0>
 80047cc:	4629      	mov	r1, r5
 80047ce:	f000 fb63 	bl	8004e98 <_malloc_r>
 80047d2:	4606      	mov	r6, r0
 80047d4:	b950      	cbnz	r0, 80047ec <__ssputs_r+0x5c>
 80047d6:	230c      	movs	r3, #12
 80047d8:	f8ca 3000 	str.w	r3, [sl]
 80047dc:	89a3      	ldrh	r3, [r4, #12]
 80047de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047e2:	81a3      	strh	r3, [r4, #12]
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295
 80047e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ec:	6921      	ldr	r1, [r4, #16]
 80047ee:	464a      	mov	r2, r9
 80047f0:	f000 fabe 	bl	8004d70 <memcpy>
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	6126      	str	r6, [r4, #16]
 8004802:	6165      	str	r5, [r4, #20]
 8004804:	444e      	add	r6, r9
 8004806:	eba5 0509 	sub.w	r5, r5, r9
 800480a:	6026      	str	r6, [r4, #0]
 800480c:	60a5      	str	r5, [r4, #8]
 800480e:	463e      	mov	r6, r7
 8004810:	42be      	cmp	r6, r7
 8004812:	d900      	bls.n	8004816 <__ssputs_r+0x86>
 8004814:	463e      	mov	r6, r7
 8004816:	6820      	ldr	r0, [r4, #0]
 8004818:	4632      	mov	r2, r6
 800481a:	4641      	mov	r1, r8
 800481c:	f000 fab6 	bl	8004d8c <memmove>
 8004820:	68a3      	ldr	r3, [r4, #8]
 8004822:	1b9b      	subs	r3, r3, r6
 8004824:	60a3      	str	r3, [r4, #8]
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	4433      	add	r3, r6
 800482a:	6023      	str	r3, [r4, #0]
 800482c:	2000      	movs	r0, #0
 800482e:	e7db      	b.n	80047e8 <__ssputs_r+0x58>
 8004830:	462a      	mov	r2, r5
 8004832:	f000 fba5 	bl	8004f80 <_realloc_r>
 8004836:	4606      	mov	r6, r0
 8004838:	2800      	cmp	r0, #0
 800483a:	d1e1      	bne.n	8004800 <__ssputs_r+0x70>
 800483c:	6921      	ldr	r1, [r4, #16]
 800483e:	4650      	mov	r0, sl
 8004840:	f000 fabe 	bl	8004dc0 <_free_r>
 8004844:	e7c7      	b.n	80047d6 <__ssputs_r+0x46>
	...

08004848 <_svfiprintf_r>:
 8004848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484c:	4698      	mov	r8, r3
 800484e:	898b      	ldrh	r3, [r1, #12]
 8004850:	061b      	lsls	r3, r3, #24
 8004852:	b09d      	sub	sp, #116	; 0x74
 8004854:	4607      	mov	r7, r0
 8004856:	460d      	mov	r5, r1
 8004858:	4614      	mov	r4, r2
 800485a:	d50e      	bpl.n	800487a <_svfiprintf_r+0x32>
 800485c:	690b      	ldr	r3, [r1, #16]
 800485e:	b963      	cbnz	r3, 800487a <_svfiprintf_r+0x32>
 8004860:	2140      	movs	r1, #64	; 0x40
 8004862:	f000 fb19 	bl	8004e98 <_malloc_r>
 8004866:	6028      	str	r0, [r5, #0]
 8004868:	6128      	str	r0, [r5, #16]
 800486a:	b920      	cbnz	r0, 8004876 <_svfiprintf_r+0x2e>
 800486c:	230c      	movs	r3, #12
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	f04f 30ff 	mov.w	r0, #4294967295
 8004874:	e0d1      	b.n	8004a1a <_svfiprintf_r+0x1d2>
 8004876:	2340      	movs	r3, #64	; 0x40
 8004878:	616b      	str	r3, [r5, #20]
 800487a:	2300      	movs	r3, #0
 800487c:	9309      	str	r3, [sp, #36]	; 0x24
 800487e:	2320      	movs	r3, #32
 8004880:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004884:	f8cd 800c 	str.w	r8, [sp, #12]
 8004888:	2330      	movs	r3, #48	; 0x30
 800488a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a34 <_svfiprintf_r+0x1ec>
 800488e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004892:	f04f 0901 	mov.w	r9, #1
 8004896:	4623      	mov	r3, r4
 8004898:	469a      	mov	sl, r3
 800489a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800489e:	b10a      	cbz	r2, 80048a4 <_svfiprintf_r+0x5c>
 80048a0:	2a25      	cmp	r2, #37	; 0x25
 80048a2:	d1f9      	bne.n	8004898 <_svfiprintf_r+0x50>
 80048a4:	ebba 0b04 	subs.w	fp, sl, r4
 80048a8:	d00b      	beq.n	80048c2 <_svfiprintf_r+0x7a>
 80048aa:	465b      	mov	r3, fp
 80048ac:	4622      	mov	r2, r4
 80048ae:	4629      	mov	r1, r5
 80048b0:	4638      	mov	r0, r7
 80048b2:	f7ff ff6d 	bl	8004790 <__ssputs_r>
 80048b6:	3001      	adds	r0, #1
 80048b8:	f000 80aa 	beq.w	8004a10 <_svfiprintf_r+0x1c8>
 80048bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048be:	445a      	add	r2, fp
 80048c0:	9209      	str	r2, [sp, #36]	; 0x24
 80048c2:	f89a 3000 	ldrb.w	r3, [sl]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 80a2 	beq.w	8004a10 <_svfiprintf_r+0x1c8>
 80048cc:	2300      	movs	r3, #0
 80048ce:	f04f 32ff 	mov.w	r2, #4294967295
 80048d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048d6:	f10a 0a01 	add.w	sl, sl, #1
 80048da:	9304      	str	r3, [sp, #16]
 80048dc:	9307      	str	r3, [sp, #28]
 80048de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048e2:	931a      	str	r3, [sp, #104]	; 0x68
 80048e4:	4654      	mov	r4, sl
 80048e6:	2205      	movs	r2, #5
 80048e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ec:	4851      	ldr	r0, [pc, #324]	; (8004a34 <_svfiprintf_r+0x1ec>)
 80048ee:	f7fb fc8f 	bl	8000210 <memchr>
 80048f2:	9a04      	ldr	r2, [sp, #16]
 80048f4:	b9d8      	cbnz	r0, 800492e <_svfiprintf_r+0xe6>
 80048f6:	06d0      	lsls	r0, r2, #27
 80048f8:	bf44      	itt	mi
 80048fa:	2320      	movmi	r3, #32
 80048fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004900:	0711      	lsls	r1, r2, #28
 8004902:	bf44      	itt	mi
 8004904:	232b      	movmi	r3, #43	; 0x2b
 8004906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800490a:	f89a 3000 	ldrb.w	r3, [sl]
 800490e:	2b2a      	cmp	r3, #42	; 0x2a
 8004910:	d015      	beq.n	800493e <_svfiprintf_r+0xf6>
 8004912:	9a07      	ldr	r2, [sp, #28]
 8004914:	4654      	mov	r4, sl
 8004916:	2000      	movs	r0, #0
 8004918:	f04f 0c0a 	mov.w	ip, #10
 800491c:	4621      	mov	r1, r4
 800491e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004922:	3b30      	subs	r3, #48	; 0x30
 8004924:	2b09      	cmp	r3, #9
 8004926:	d94e      	bls.n	80049c6 <_svfiprintf_r+0x17e>
 8004928:	b1b0      	cbz	r0, 8004958 <_svfiprintf_r+0x110>
 800492a:	9207      	str	r2, [sp, #28]
 800492c:	e014      	b.n	8004958 <_svfiprintf_r+0x110>
 800492e:	eba0 0308 	sub.w	r3, r0, r8
 8004932:	fa09 f303 	lsl.w	r3, r9, r3
 8004936:	4313      	orrs	r3, r2
 8004938:	9304      	str	r3, [sp, #16]
 800493a:	46a2      	mov	sl, r4
 800493c:	e7d2      	b.n	80048e4 <_svfiprintf_r+0x9c>
 800493e:	9b03      	ldr	r3, [sp, #12]
 8004940:	1d19      	adds	r1, r3, #4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	9103      	str	r1, [sp, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	bfbb      	ittet	lt
 800494a:	425b      	neglt	r3, r3
 800494c:	f042 0202 	orrlt.w	r2, r2, #2
 8004950:	9307      	strge	r3, [sp, #28]
 8004952:	9307      	strlt	r3, [sp, #28]
 8004954:	bfb8      	it	lt
 8004956:	9204      	strlt	r2, [sp, #16]
 8004958:	7823      	ldrb	r3, [r4, #0]
 800495a:	2b2e      	cmp	r3, #46	; 0x2e
 800495c:	d10c      	bne.n	8004978 <_svfiprintf_r+0x130>
 800495e:	7863      	ldrb	r3, [r4, #1]
 8004960:	2b2a      	cmp	r3, #42	; 0x2a
 8004962:	d135      	bne.n	80049d0 <_svfiprintf_r+0x188>
 8004964:	9b03      	ldr	r3, [sp, #12]
 8004966:	1d1a      	adds	r2, r3, #4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	9203      	str	r2, [sp, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	bfb8      	it	lt
 8004970:	f04f 33ff 	movlt.w	r3, #4294967295
 8004974:	3402      	adds	r4, #2
 8004976:	9305      	str	r3, [sp, #20]
 8004978:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a44 <_svfiprintf_r+0x1fc>
 800497c:	7821      	ldrb	r1, [r4, #0]
 800497e:	2203      	movs	r2, #3
 8004980:	4650      	mov	r0, sl
 8004982:	f7fb fc45 	bl	8000210 <memchr>
 8004986:	b140      	cbz	r0, 800499a <_svfiprintf_r+0x152>
 8004988:	2340      	movs	r3, #64	; 0x40
 800498a:	eba0 000a 	sub.w	r0, r0, sl
 800498e:	fa03 f000 	lsl.w	r0, r3, r0
 8004992:	9b04      	ldr	r3, [sp, #16]
 8004994:	4303      	orrs	r3, r0
 8004996:	3401      	adds	r4, #1
 8004998:	9304      	str	r3, [sp, #16]
 800499a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800499e:	4826      	ldr	r0, [pc, #152]	; (8004a38 <_svfiprintf_r+0x1f0>)
 80049a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049a4:	2206      	movs	r2, #6
 80049a6:	f7fb fc33 	bl	8000210 <memchr>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d038      	beq.n	8004a20 <_svfiprintf_r+0x1d8>
 80049ae:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <_svfiprintf_r+0x1f4>)
 80049b0:	bb1b      	cbnz	r3, 80049fa <_svfiprintf_r+0x1b2>
 80049b2:	9b03      	ldr	r3, [sp, #12]
 80049b4:	3307      	adds	r3, #7
 80049b6:	f023 0307 	bic.w	r3, r3, #7
 80049ba:	3308      	adds	r3, #8
 80049bc:	9303      	str	r3, [sp, #12]
 80049be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c0:	4433      	add	r3, r6
 80049c2:	9309      	str	r3, [sp, #36]	; 0x24
 80049c4:	e767      	b.n	8004896 <_svfiprintf_r+0x4e>
 80049c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ca:	460c      	mov	r4, r1
 80049cc:	2001      	movs	r0, #1
 80049ce:	e7a5      	b.n	800491c <_svfiprintf_r+0xd4>
 80049d0:	2300      	movs	r3, #0
 80049d2:	3401      	adds	r4, #1
 80049d4:	9305      	str	r3, [sp, #20]
 80049d6:	4619      	mov	r1, r3
 80049d8:	f04f 0c0a 	mov.w	ip, #10
 80049dc:	4620      	mov	r0, r4
 80049de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049e2:	3a30      	subs	r2, #48	; 0x30
 80049e4:	2a09      	cmp	r2, #9
 80049e6:	d903      	bls.n	80049f0 <_svfiprintf_r+0x1a8>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0c5      	beq.n	8004978 <_svfiprintf_r+0x130>
 80049ec:	9105      	str	r1, [sp, #20]
 80049ee:	e7c3      	b.n	8004978 <_svfiprintf_r+0x130>
 80049f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80049f4:	4604      	mov	r4, r0
 80049f6:	2301      	movs	r3, #1
 80049f8:	e7f0      	b.n	80049dc <_svfiprintf_r+0x194>
 80049fa:	ab03      	add	r3, sp, #12
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	462a      	mov	r2, r5
 8004a00:	4b0f      	ldr	r3, [pc, #60]	; (8004a40 <_svfiprintf_r+0x1f8>)
 8004a02:	a904      	add	r1, sp, #16
 8004a04:	4638      	mov	r0, r7
 8004a06:	f3af 8000 	nop.w
 8004a0a:	1c42      	adds	r2, r0, #1
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	d1d6      	bne.n	80049be <_svfiprintf_r+0x176>
 8004a10:	89ab      	ldrh	r3, [r5, #12]
 8004a12:	065b      	lsls	r3, r3, #25
 8004a14:	f53f af2c 	bmi.w	8004870 <_svfiprintf_r+0x28>
 8004a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a1a:	b01d      	add	sp, #116	; 0x74
 8004a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a20:	ab03      	add	r3, sp, #12
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	462a      	mov	r2, r5
 8004a26:	4b06      	ldr	r3, [pc, #24]	; (8004a40 <_svfiprintf_r+0x1f8>)
 8004a28:	a904      	add	r1, sp, #16
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	f000 f87a 	bl	8004b24 <_printf_i>
 8004a30:	e7eb      	b.n	8004a0a <_svfiprintf_r+0x1c2>
 8004a32:	bf00      	nop
 8004a34:	08005074 	.word	0x08005074
 8004a38:	0800507e 	.word	0x0800507e
 8004a3c:	00000000 	.word	0x00000000
 8004a40:	08004791 	.word	0x08004791
 8004a44:	0800507a 	.word	0x0800507a

08004a48 <_printf_common>:
 8004a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4c:	4616      	mov	r6, r2
 8004a4e:	4699      	mov	r9, r3
 8004a50:	688a      	ldr	r2, [r1, #8]
 8004a52:	690b      	ldr	r3, [r1, #16]
 8004a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	bfb8      	it	lt
 8004a5c:	4613      	movlt	r3, r2
 8004a5e:	6033      	str	r3, [r6, #0]
 8004a60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a64:	4607      	mov	r7, r0
 8004a66:	460c      	mov	r4, r1
 8004a68:	b10a      	cbz	r2, 8004a6e <_printf_common+0x26>
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	6033      	str	r3, [r6, #0]
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	0699      	lsls	r1, r3, #26
 8004a72:	bf42      	ittt	mi
 8004a74:	6833      	ldrmi	r3, [r6, #0]
 8004a76:	3302      	addmi	r3, #2
 8004a78:	6033      	strmi	r3, [r6, #0]
 8004a7a:	6825      	ldr	r5, [r4, #0]
 8004a7c:	f015 0506 	ands.w	r5, r5, #6
 8004a80:	d106      	bne.n	8004a90 <_printf_common+0x48>
 8004a82:	f104 0a19 	add.w	sl, r4, #25
 8004a86:	68e3      	ldr	r3, [r4, #12]
 8004a88:	6832      	ldr	r2, [r6, #0]
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	42ab      	cmp	r3, r5
 8004a8e:	dc26      	bgt.n	8004ade <_printf_common+0x96>
 8004a90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a94:	1e13      	subs	r3, r2, #0
 8004a96:	6822      	ldr	r2, [r4, #0]
 8004a98:	bf18      	it	ne
 8004a9a:	2301      	movne	r3, #1
 8004a9c:	0692      	lsls	r2, r2, #26
 8004a9e:	d42b      	bmi.n	8004af8 <_printf_common+0xb0>
 8004aa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	47c0      	blx	r8
 8004aaa:	3001      	adds	r0, #1
 8004aac:	d01e      	beq.n	8004aec <_printf_common+0xa4>
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	68e5      	ldr	r5, [r4, #12]
 8004ab2:	6832      	ldr	r2, [r6, #0]
 8004ab4:	f003 0306 	and.w	r3, r3, #6
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	bf08      	it	eq
 8004abc:	1aad      	subeq	r5, r5, r2
 8004abe:	68a3      	ldr	r3, [r4, #8]
 8004ac0:	6922      	ldr	r2, [r4, #16]
 8004ac2:	bf0c      	ite	eq
 8004ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ac8:	2500      	movne	r5, #0
 8004aca:	4293      	cmp	r3, r2
 8004acc:	bfc4      	itt	gt
 8004ace:	1a9b      	subgt	r3, r3, r2
 8004ad0:	18ed      	addgt	r5, r5, r3
 8004ad2:	2600      	movs	r6, #0
 8004ad4:	341a      	adds	r4, #26
 8004ad6:	42b5      	cmp	r5, r6
 8004ad8:	d11a      	bne.n	8004b10 <_printf_common+0xc8>
 8004ada:	2000      	movs	r0, #0
 8004adc:	e008      	b.n	8004af0 <_printf_common+0xa8>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4652      	mov	r2, sl
 8004ae2:	4649      	mov	r1, r9
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	47c0      	blx	r8
 8004ae8:	3001      	adds	r0, #1
 8004aea:	d103      	bne.n	8004af4 <_printf_common+0xac>
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af4:	3501      	adds	r5, #1
 8004af6:	e7c6      	b.n	8004a86 <_printf_common+0x3e>
 8004af8:	18e1      	adds	r1, r4, r3
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	2030      	movs	r0, #48	; 0x30
 8004afe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b02:	4422      	add	r2, r4
 8004b04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b0c:	3302      	adds	r3, #2
 8004b0e:	e7c7      	b.n	8004aa0 <_printf_common+0x58>
 8004b10:	2301      	movs	r3, #1
 8004b12:	4622      	mov	r2, r4
 8004b14:	4649      	mov	r1, r9
 8004b16:	4638      	mov	r0, r7
 8004b18:	47c0      	blx	r8
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d0e6      	beq.n	8004aec <_printf_common+0xa4>
 8004b1e:	3601      	adds	r6, #1
 8004b20:	e7d9      	b.n	8004ad6 <_printf_common+0x8e>
	...

08004b24 <_printf_i>:
 8004b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b28:	7e0f      	ldrb	r7, [r1, #24]
 8004b2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b2c:	2f78      	cmp	r7, #120	; 0x78
 8004b2e:	4691      	mov	r9, r2
 8004b30:	4680      	mov	r8, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	469a      	mov	sl, r3
 8004b36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b3a:	d807      	bhi.n	8004b4c <_printf_i+0x28>
 8004b3c:	2f62      	cmp	r7, #98	; 0x62
 8004b3e:	d80a      	bhi.n	8004b56 <_printf_i+0x32>
 8004b40:	2f00      	cmp	r7, #0
 8004b42:	f000 80d8 	beq.w	8004cf6 <_printf_i+0x1d2>
 8004b46:	2f58      	cmp	r7, #88	; 0x58
 8004b48:	f000 80a3 	beq.w	8004c92 <_printf_i+0x16e>
 8004b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b54:	e03a      	b.n	8004bcc <_printf_i+0xa8>
 8004b56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b5a:	2b15      	cmp	r3, #21
 8004b5c:	d8f6      	bhi.n	8004b4c <_printf_i+0x28>
 8004b5e:	a101      	add	r1, pc, #4	; (adr r1, 8004b64 <_printf_i+0x40>)
 8004b60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b64:	08004bbd 	.word	0x08004bbd
 8004b68:	08004bd1 	.word	0x08004bd1
 8004b6c:	08004b4d 	.word	0x08004b4d
 8004b70:	08004b4d 	.word	0x08004b4d
 8004b74:	08004b4d 	.word	0x08004b4d
 8004b78:	08004b4d 	.word	0x08004b4d
 8004b7c:	08004bd1 	.word	0x08004bd1
 8004b80:	08004b4d 	.word	0x08004b4d
 8004b84:	08004b4d 	.word	0x08004b4d
 8004b88:	08004b4d 	.word	0x08004b4d
 8004b8c:	08004b4d 	.word	0x08004b4d
 8004b90:	08004cdd 	.word	0x08004cdd
 8004b94:	08004c01 	.word	0x08004c01
 8004b98:	08004cbf 	.word	0x08004cbf
 8004b9c:	08004b4d 	.word	0x08004b4d
 8004ba0:	08004b4d 	.word	0x08004b4d
 8004ba4:	08004cff 	.word	0x08004cff
 8004ba8:	08004b4d 	.word	0x08004b4d
 8004bac:	08004c01 	.word	0x08004c01
 8004bb0:	08004b4d 	.word	0x08004b4d
 8004bb4:	08004b4d 	.word	0x08004b4d
 8004bb8:	08004cc7 	.word	0x08004cc7
 8004bbc:	682b      	ldr	r3, [r5, #0]
 8004bbe:	1d1a      	adds	r2, r3, #4
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	602a      	str	r2, [r5, #0]
 8004bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0a3      	b.n	8004d18 <_printf_i+0x1f4>
 8004bd0:	6820      	ldr	r0, [r4, #0]
 8004bd2:	6829      	ldr	r1, [r5, #0]
 8004bd4:	0606      	lsls	r6, r0, #24
 8004bd6:	f101 0304 	add.w	r3, r1, #4
 8004bda:	d50a      	bpl.n	8004bf2 <_printf_i+0xce>
 8004bdc:	680e      	ldr	r6, [r1, #0]
 8004bde:	602b      	str	r3, [r5, #0]
 8004be0:	2e00      	cmp	r6, #0
 8004be2:	da03      	bge.n	8004bec <_printf_i+0xc8>
 8004be4:	232d      	movs	r3, #45	; 0x2d
 8004be6:	4276      	negs	r6, r6
 8004be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bec:	485e      	ldr	r0, [pc, #376]	; (8004d68 <_printf_i+0x244>)
 8004bee:	230a      	movs	r3, #10
 8004bf0:	e019      	b.n	8004c26 <_printf_i+0x102>
 8004bf2:	680e      	ldr	r6, [r1, #0]
 8004bf4:	602b      	str	r3, [r5, #0]
 8004bf6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bfa:	bf18      	it	ne
 8004bfc:	b236      	sxthne	r6, r6
 8004bfe:	e7ef      	b.n	8004be0 <_printf_i+0xbc>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	6820      	ldr	r0, [r4, #0]
 8004c04:	1d19      	adds	r1, r3, #4
 8004c06:	6029      	str	r1, [r5, #0]
 8004c08:	0601      	lsls	r1, r0, #24
 8004c0a:	d501      	bpl.n	8004c10 <_printf_i+0xec>
 8004c0c:	681e      	ldr	r6, [r3, #0]
 8004c0e:	e002      	b.n	8004c16 <_printf_i+0xf2>
 8004c10:	0646      	lsls	r6, r0, #25
 8004c12:	d5fb      	bpl.n	8004c0c <_printf_i+0xe8>
 8004c14:	881e      	ldrh	r6, [r3, #0]
 8004c16:	4854      	ldr	r0, [pc, #336]	; (8004d68 <_printf_i+0x244>)
 8004c18:	2f6f      	cmp	r7, #111	; 0x6f
 8004c1a:	bf0c      	ite	eq
 8004c1c:	2308      	moveq	r3, #8
 8004c1e:	230a      	movne	r3, #10
 8004c20:	2100      	movs	r1, #0
 8004c22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c26:	6865      	ldr	r5, [r4, #4]
 8004c28:	60a5      	str	r5, [r4, #8]
 8004c2a:	2d00      	cmp	r5, #0
 8004c2c:	bfa2      	ittt	ge
 8004c2e:	6821      	ldrge	r1, [r4, #0]
 8004c30:	f021 0104 	bicge.w	r1, r1, #4
 8004c34:	6021      	strge	r1, [r4, #0]
 8004c36:	b90e      	cbnz	r6, 8004c3c <_printf_i+0x118>
 8004c38:	2d00      	cmp	r5, #0
 8004c3a:	d04d      	beq.n	8004cd8 <_printf_i+0x1b4>
 8004c3c:	4615      	mov	r5, r2
 8004c3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c42:	fb03 6711 	mls	r7, r3, r1, r6
 8004c46:	5dc7      	ldrb	r7, [r0, r7]
 8004c48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c4c:	4637      	mov	r7, r6
 8004c4e:	42bb      	cmp	r3, r7
 8004c50:	460e      	mov	r6, r1
 8004c52:	d9f4      	bls.n	8004c3e <_printf_i+0x11a>
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d10b      	bne.n	8004c70 <_printf_i+0x14c>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	07de      	lsls	r6, r3, #31
 8004c5c:	d508      	bpl.n	8004c70 <_printf_i+0x14c>
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	6861      	ldr	r1, [r4, #4]
 8004c62:	4299      	cmp	r1, r3
 8004c64:	bfde      	ittt	le
 8004c66:	2330      	movle	r3, #48	; 0x30
 8004c68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c70:	1b52      	subs	r2, r2, r5
 8004c72:	6122      	str	r2, [r4, #16]
 8004c74:	f8cd a000 	str.w	sl, [sp]
 8004c78:	464b      	mov	r3, r9
 8004c7a:	aa03      	add	r2, sp, #12
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4640      	mov	r0, r8
 8004c80:	f7ff fee2 	bl	8004a48 <_printf_common>
 8004c84:	3001      	adds	r0, #1
 8004c86:	d14c      	bne.n	8004d22 <_printf_i+0x1fe>
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8c:	b004      	add	sp, #16
 8004c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c92:	4835      	ldr	r0, [pc, #212]	; (8004d68 <_printf_i+0x244>)
 8004c94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c98:	6829      	ldr	r1, [r5, #0]
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ca0:	6029      	str	r1, [r5, #0]
 8004ca2:	061d      	lsls	r5, r3, #24
 8004ca4:	d514      	bpl.n	8004cd0 <_printf_i+0x1ac>
 8004ca6:	07df      	lsls	r7, r3, #31
 8004ca8:	bf44      	itt	mi
 8004caa:	f043 0320 	orrmi.w	r3, r3, #32
 8004cae:	6023      	strmi	r3, [r4, #0]
 8004cb0:	b91e      	cbnz	r6, 8004cba <_printf_i+0x196>
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	f023 0320 	bic.w	r3, r3, #32
 8004cb8:	6023      	str	r3, [r4, #0]
 8004cba:	2310      	movs	r3, #16
 8004cbc:	e7b0      	b.n	8004c20 <_printf_i+0xfc>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	f043 0320 	orr.w	r3, r3, #32
 8004cc4:	6023      	str	r3, [r4, #0]
 8004cc6:	2378      	movs	r3, #120	; 0x78
 8004cc8:	4828      	ldr	r0, [pc, #160]	; (8004d6c <_printf_i+0x248>)
 8004cca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cce:	e7e3      	b.n	8004c98 <_printf_i+0x174>
 8004cd0:	0659      	lsls	r1, r3, #25
 8004cd2:	bf48      	it	mi
 8004cd4:	b2b6      	uxthmi	r6, r6
 8004cd6:	e7e6      	b.n	8004ca6 <_printf_i+0x182>
 8004cd8:	4615      	mov	r5, r2
 8004cda:	e7bb      	b.n	8004c54 <_printf_i+0x130>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	6826      	ldr	r6, [r4, #0]
 8004ce0:	6961      	ldr	r1, [r4, #20]
 8004ce2:	1d18      	adds	r0, r3, #4
 8004ce4:	6028      	str	r0, [r5, #0]
 8004ce6:	0635      	lsls	r5, r6, #24
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	d501      	bpl.n	8004cf0 <_printf_i+0x1cc>
 8004cec:	6019      	str	r1, [r3, #0]
 8004cee:	e002      	b.n	8004cf6 <_printf_i+0x1d2>
 8004cf0:	0670      	lsls	r0, r6, #25
 8004cf2:	d5fb      	bpl.n	8004cec <_printf_i+0x1c8>
 8004cf4:	8019      	strh	r1, [r3, #0]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	6123      	str	r3, [r4, #16]
 8004cfa:	4615      	mov	r5, r2
 8004cfc:	e7ba      	b.n	8004c74 <_printf_i+0x150>
 8004cfe:	682b      	ldr	r3, [r5, #0]
 8004d00:	1d1a      	adds	r2, r3, #4
 8004d02:	602a      	str	r2, [r5, #0]
 8004d04:	681d      	ldr	r5, [r3, #0]
 8004d06:	6862      	ldr	r2, [r4, #4]
 8004d08:	2100      	movs	r1, #0
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f7fb fa80 	bl	8000210 <memchr>
 8004d10:	b108      	cbz	r0, 8004d16 <_printf_i+0x1f2>
 8004d12:	1b40      	subs	r0, r0, r5
 8004d14:	6060      	str	r0, [r4, #4]
 8004d16:	6863      	ldr	r3, [r4, #4]
 8004d18:	6123      	str	r3, [r4, #16]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d20:	e7a8      	b.n	8004c74 <_printf_i+0x150>
 8004d22:	6923      	ldr	r3, [r4, #16]
 8004d24:	462a      	mov	r2, r5
 8004d26:	4649      	mov	r1, r9
 8004d28:	4640      	mov	r0, r8
 8004d2a:	47d0      	blx	sl
 8004d2c:	3001      	adds	r0, #1
 8004d2e:	d0ab      	beq.n	8004c88 <_printf_i+0x164>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	079b      	lsls	r3, r3, #30
 8004d34:	d413      	bmi.n	8004d5e <_printf_i+0x23a>
 8004d36:	68e0      	ldr	r0, [r4, #12]
 8004d38:	9b03      	ldr	r3, [sp, #12]
 8004d3a:	4298      	cmp	r0, r3
 8004d3c:	bfb8      	it	lt
 8004d3e:	4618      	movlt	r0, r3
 8004d40:	e7a4      	b.n	8004c8c <_printf_i+0x168>
 8004d42:	2301      	movs	r3, #1
 8004d44:	4632      	mov	r2, r6
 8004d46:	4649      	mov	r1, r9
 8004d48:	4640      	mov	r0, r8
 8004d4a:	47d0      	blx	sl
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d09b      	beq.n	8004c88 <_printf_i+0x164>
 8004d50:	3501      	adds	r5, #1
 8004d52:	68e3      	ldr	r3, [r4, #12]
 8004d54:	9903      	ldr	r1, [sp, #12]
 8004d56:	1a5b      	subs	r3, r3, r1
 8004d58:	42ab      	cmp	r3, r5
 8004d5a:	dcf2      	bgt.n	8004d42 <_printf_i+0x21e>
 8004d5c:	e7eb      	b.n	8004d36 <_printf_i+0x212>
 8004d5e:	2500      	movs	r5, #0
 8004d60:	f104 0619 	add.w	r6, r4, #25
 8004d64:	e7f5      	b.n	8004d52 <_printf_i+0x22e>
 8004d66:	bf00      	nop
 8004d68:	08005085 	.word	0x08005085
 8004d6c:	08005096 	.word	0x08005096

08004d70 <memcpy>:
 8004d70:	440a      	add	r2, r1
 8004d72:	4291      	cmp	r1, r2
 8004d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d78:	d100      	bne.n	8004d7c <memcpy+0xc>
 8004d7a:	4770      	bx	lr
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d86:	4291      	cmp	r1, r2
 8004d88:	d1f9      	bne.n	8004d7e <memcpy+0xe>
 8004d8a:	bd10      	pop	{r4, pc}

08004d8c <memmove>:
 8004d8c:	4288      	cmp	r0, r1
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	eb01 0402 	add.w	r4, r1, r2
 8004d94:	d902      	bls.n	8004d9c <memmove+0x10>
 8004d96:	4284      	cmp	r4, r0
 8004d98:	4623      	mov	r3, r4
 8004d9a:	d807      	bhi.n	8004dac <memmove+0x20>
 8004d9c:	1e43      	subs	r3, r0, #1
 8004d9e:	42a1      	cmp	r1, r4
 8004da0:	d008      	beq.n	8004db4 <memmove+0x28>
 8004da2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004da6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004daa:	e7f8      	b.n	8004d9e <memmove+0x12>
 8004dac:	4402      	add	r2, r0
 8004dae:	4601      	mov	r1, r0
 8004db0:	428a      	cmp	r2, r1
 8004db2:	d100      	bne.n	8004db6 <memmove+0x2a>
 8004db4:	bd10      	pop	{r4, pc}
 8004db6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dbe:	e7f7      	b.n	8004db0 <memmove+0x24>

08004dc0 <_free_r>:
 8004dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dc2:	2900      	cmp	r1, #0
 8004dc4:	d044      	beq.n	8004e50 <_free_r+0x90>
 8004dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dca:	9001      	str	r0, [sp, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f1a1 0404 	sub.w	r4, r1, #4
 8004dd2:	bfb8      	it	lt
 8004dd4:	18e4      	addlt	r4, r4, r3
 8004dd6:	f000 f913 	bl	8005000 <__malloc_lock>
 8004dda:	4a1e      	ldr	r2, [pc, #120]	; (8004e54 <_free_r+0x94>)
 8004ddc:	9801      	ldr	r0, [sp, #4]
 8004dde:	6813      	ldr	r3, [r2, #0]
 8004de0:	b933      	cbnz	r3, 8004df0 <_free_r+0x30>
 8004de2:	6063      	str	r3, [r4, #4]
 8004de4:	6014      	str	r4, [r2, #0]
 8004de6:	b003      	add	sp, #12
 8004de8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dec:	f000 b90e 	b.w	800500c <__malloc_unlock>
 8004df0:	42a3      	cmp	r3, r4
 8004df2:	d908      	bls.n	8004e06 <_free_r+0x46>
 8004df4:	6825      	ldr	r5, [r4, #0]
 8004df6:	1961      	adds	r1, r4, r5
 8004df8:	428b      	cmp	r3, r1
 8004dfa:	bf01      	itttt	eq
 8004dfc:	6819      	ldreq	r1, [r3, #0]
 8004dfe:	685b      	ldreq	r3, [r3, #4]
 8004e00:	1949      	addeq	r1, r1, r5
 8004e02:	6021      	streq	r1, [r4, #0]
 8004e04:	e7ed      	b.n	8004de2 <_free_r+0x22>
 8004e06:	461a      	mov	r2, r3
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	b10b      	cbz	r3, 8004e10 <_free_r+0x50>
 8004e0c:	42a3      	cmp	r3, r4
 8004e0e:	d9fa      	bls.n	8004e06 <_free_r+0x46>
 8004e10:	6811      	ldr	r1, [r2, #0]
 8004e12:	1855      	adds	r5, r2, r1
 8004e14:	42a5      	cmp	r5, r4
 8004e16:	d10b      	bne.n	8004e30 <_free_r+0x70>
 8004e18:	6824      	ldr	r4, [r4, #0]
 8004e1a:	4421      	add	r1, r4
 8004e1c:	1854      	adds	r4, r2, r1
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	6011      	str	r1, [r2, #0]
 8004e22:	d1e0      	bne.n	8004de6 <_free_r+0x26>
 8004e24:	681c      	ldr	r4, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	6053      	str	r3, [r2, #4]
 8004e2a:	4421      	add	r1, r4
 8004e2c:	6011      	str	r1, [r2, #0]
 8004e2e:	e7da      	b.n	8004de6 <_free_r+0x26>
 8004e30:	d902      	bls.n	8004e38 <_free_r+0x78>
 8004e32:	230c      	movs	r3, #12
 8004e34:	6003      	str	r3, [r0, #0]
 8004e36:	e7d6      	b.n	8004de6 <_free_r+0x26>
 8004e38:	6825      	ldr	r5, [r4, #0]
 8004e3a:	1961      	adds	r1, r4, r5
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	bf04      	itt	eq
 8004e40:	6819      	ldreq	r1, [r3, #0]
 8004e42:	685b      	ldreq	r3, [r3, #4]
 8004e44:	6063      	str	r3, [r4, #4]
 8004e46:	bf04      	itt	eq
 8004e48:	1949      	addeq	r1, r1, r5
 8004e4a:	6021      	streq	r1, [r4, #0]
 8004e4c:	6054      	str	r4, [r2, #4]
 8004e4e:	e7ca      	b.n	8004de6 <_free_r+0x26>
 8004e50:	b003      	add	sp, #12
 8004e52:	bd30      	pop	{r4, r5, pc}
 8004e54:	20000240 	.word	0x20000240

08004e58 <sbrk_aligned>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	4e0e      	ldr	r6, [pc, #56]	; (8004e94 <sbrk_aligned+0x3c>)
 8004e5c:	460c      	mov	r4, r1
 8004e5e:	6831      	ldr	r1, [r6, #0]
 8004e60:	4605      	mov	r5, r0
 8004e62:	b911      	cbnz	r1, 8004e6a <sbrk_aligned+0x12>
 8004e64:	f000 f8bc 	bl	8004fe0 <_sbrk_r>
 8004e68:	6030      	str	r0, [r6, #0]
 8004e6a:	4621      	mov	r1, r4
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	f000 f8b7 	bl	8004fe0 <_sbrk_r>
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	d00a      	beq.n	8004e8c <sbrk_aligned+0x34>
 8004e76:	1cc4      	adds	r4, r0, #3
 8004e78:	f024 0403 	bic.w	r4, r4, #3
 8004e7c:	42a0      	cmp	r0, r4
 8004e7e:	d007      	beq.n	8004e90 <sbrk_aligned+0x38>
 8004e80:	1a21      	subs	r1, r4, r0
 8004e82:	4628      	mov	r0, r5
 8004e84:	f000 f8ac 	bl	8004fe0 <_sbrk_r>
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d101      	bne.n	8004e90 <sbrk_aligned+0x38>
 8004e8c:	f04f 34ff 	mov.w	r4, #4294967295
 8004e90:	4620      	mov	r0, r4
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
 8004e94:	20000244 	.word	0x20000244

08004e98 <_malloc_r>:
 8004e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e9c:	1ccd      	adds	r5, r1, #3
 8004e9e:	f025 0503 	bic.w	r5, r5, #3
 8004ea2:	3508      	adds	r5, #8
 8004ea4:	2d0c      	cmp	r5, #12
 8004ea6:	bf38      	it	cc
 8004ea8:	250c      	movcc	r5, #12
 8004eaa:	2d00      	cmp	r5, #0
 8004eac:	4607      	mov	r7, r0
 8004eae:	db01      	blt.n	8004eb4 <_malloc_r+0x1c>
 8004eb0:	42a9      	cmp	r1, r5
 8004eb2:	d905      	bls.n	8004ec0 <_malloc_r+0x28>
 8004eb4:	230c      	movs	r3, #12
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	2600      	movs	r6, #0
 8004eba:	4630      	mov	r0, r6
 8004ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ec0:	4e2e      	ldr	r6, [pc, #184]	; (8004f7c <_malloc_r+0xe4>)
 8004ec2:	f000 f89d 	bl	8005000 <__malloc_lock>
 8004ec6:	6833      	ldr	r3, [r6, #0]
 8004ec8:	461c      	mov	r4, r3
 8004eca:	bb34      	cbnz	r4, 8004f1a <_malloc_r+0x82>
 8004ecc:	4629      	mov	r1, r5
 8004ece:	4638      	mov	r0, r7
 8004ed0:	f7ff ffc2 	bl	8004e58 <sbrk_aligned>
 8004ed4:	1c43      	adds	r3, r0, #1
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	d14d      	bne.n	8004f76 <_malloc_r+0xde>
 8004eda:	6834      	ldr	r4, [r6, #0]
 8004edc:	4626      	mov	r6, r4
 8004ede:	2e00      	cmp	r6, #0
 8004ee0:	d140      	bne.n	8004f64 <_malloc_r+0xcc>
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	eb04 0803 	add.w	r8, r4, r3
 8004eec:	f000 f878 	bl	8004fe0 <_sbrk_r>
 8004ef0:	4580      	cmp	r8, r0
 8004ef2:	d13a      	bne.n	8004f6a <_malloc_r+0xd2>
 8004ef4:	6821      	ldr	r1, [r4, #0]
 8004ef6:	3503      	adds	r5, #3
 8004ef8:	1a6d      	subs	r5, r5, r1
 8004efa:	f025 0503 	bic.w	r5, r5, #3
 8004efe:	3508      	adds	r5, #8
 8004f00:	2d0c      	cmp	r5, #12
 8004f02:	bf38      	it	cc
 8004f04:	250c      	movcc	r5, #12
 8004f06:	4629      	mov	r1, r5
 8004f08:	4638      	mov	r0, r7
 8004f0a:	f7ff ffa5 	bl	8004e58 <sbrk_aligned>
 8004f0e:	3001      	adds	r0, #1
 8004f10:	d02b      	beq.n	8004f6a <_malloc_r+0xd2>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	442b      	add	r3, r5
 8004f16:	6023      	str	r3, [r4, #0]
 8004f18:	e00e      	b.n	8004f38 <_malloc_r+0xa0>
 8004f1a:	6822      	ldr	r2, [r4, #0]
 8004f1c:	1b52      	subs	r2, r2, r5
 8004f1e:	d41e      	bmi.n	8004f5e <_malloc_r+0xc6>
 8004f20:	2a0b      	cmp	r2, #11
 8004f22:	d916      	bls.n	8004f52 <_malloc_r+0xba>
 8004f24:	1961      	adds	r1, r4, r5
 8004f26:	42a3      	cmp	r3, r4
 8004f28:	6025      	str	r5, [r4, #0]
 8004f2a:	bf18      	it	ne
 8004f2c:	6059      	strne	r1, [r3, #4]
 8004f2e:	6863      	ldr	r3, [r4, #4]
 8004f30:	bf08      	it	eq
 8004f32:	6031      	streq	r1, [r6, #0]
 8004f34:	5162      	str	r2, [r4, r5]
 8004f36:	604b      	str	r3, [r1, #4]
 8004f38:	4638      	mov	r0, r7
 8004f3a:	f104 060b 	add.w	r6, r4, #11
 8004f3e:	f000 f865 	bl	800500c <__malloc_unlock>
 8004f42:	f026 0607 	bic.w	r6, r6, #7
 8004f46:	1d23      	adds	r3, r4, #4
 8004f48:	1af2      	subs	r2, r6, r3
 8004f4a:	d0b6      	beq.n	8004eba <_malloc_r+0x22>
 8004f4c:	1b9b      	subs	r3, r3, r6
 8004f4e:	50a3      	str	r3, [r4, r2]
 8004f50:	e7b3      	b.n	8004eba <_malloc_r+0x22>
 8004f52:	6862      	ldr	r2, [r4, #4]
 8004f54:	42a3      	cmp	r3, r4
 8004f56:	bf0c      	ite	eq
 8004f58:	6032      	streq	r2, [r6, #0]
 8004f5a:	605a      	strne	r2, [r3, #4]
 8004f5c:	e7ec      	b.n	8004f38 <_malloc_r+0xa0>
 8004f5e:	4623      	mov	r3, r4
 8004f60:	6864      	ldr	r4, [r4, #4]
 8004f62:	e7b2      	b.n	8004eca <_malloc_r+0x32>
 8004f64:	4634      	mov	r4, r6
 8004f66:	6876      	ldr	r6, [r6, #4]
 8004f68:	e7b9      	b.n	8004ede <_malloc_r+0x46>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	4638      	mov	r0, r7
 8004f70:	f000 f84c 	bl	800500c <__malloc_unlock>
 8004f74:	e7a1      	b.n	8004eba <_malloc_r+0x22>
 8004f76:	6025      	str	r5, [r4, #0]
 8004f78:	e7de      	b.n	8004f38 <_malloc_r+0xa0>
 8004f7a:	bf00      	nop
 8004f7c:	20000240 	.word	0x20000240

08004f80 <_realloc_r>:
 8004f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f84:	4680      	mov	r8, r0
 8004f86:	4614      	mov	r4, r2
 8004f88:	460e      	mov	r6, r1
 8004f8a:	b921      	cbnz	r1, 8004f96 <_realloc_r+0x16>
 8004f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f90:	4611      	mov	r1, r2
 8004f92:	f7ff bf81 	b.w	8004e98 <_malloc_r>
 8004f96:	b92a      	cbnz	r2, 8004fa4 <_realloc_r+0x24>
 8004f98:	f7ff ff12 	bl	8004dc0 <_free_r>
 8004f9c:	4625      	mov	r5, r4
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fa4:	f000 f838 	bl	8005018 <_malloc_usable_size_r>
 8004fa8:	4284      	cmp	r4, r0
 8004faa:	4607      	mov	r7, r0
 8004fac:	d802      	bhi.n	8004fb4 <_realloc_r+0x34>
 8004fae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fb2:	d812      	bhi.n	8004fda <_realloc_r+0x5a>
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	4640      	mov	r0, r8
 8004fb8:	f7ff ff6e 	bl	8004e98 <_malloc_r>
 8004fbc:	4605      	mov	r5, r0
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d0ed      	beq.n	8004f9e <_realloc_r+0x1e>
 8004fc2:	42bc      	cmp	r4, r7
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	bf28      	it	cs
 8004fca:	463a      	movcs	r2, r7
 8004fcc:	f7ff fed0 	bl	8004d70 <memcpy>
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4640      	mov	r0, r8
 8004fd4:	f7ff fef4 	bl	8004dc0 <_free_r>
 8004fd8:	e7e1      	b.n	8004f9e <_realloc_r+0x1e>
 8004fda:	4635      	mov	r5, r6
 8004fdc:	e7df      	b.n	8004f9e <_realloc_r+0x1e>
	...

08004fe0 <_sbrk_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4d06      	ldr	r5, [pc, #24]	; (8004ffc <_sbrk_r+0x1c>)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4608      	mov	r0, r1
 8004fea:	602b      	str	r3, [r5, #0]
 8004fec:	f7fc f9e2 	bl	80013b4 <_sbrk>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_sbrk_r+0x1a>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_sbrk_r+0x1a>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	20000248 	.word	0x20000248

08005000 <__malloc_lock>:
 8005000:	4801      	ldr	r0, [pc, #4]	; (8005008 <__malloc_lock+0x8>)
 8005002:	f000 b811 	b.w	8005028 <__retarget_lock_acquire_recursive>
 8005006:	bf00      	nop
 8005008:	2000024c 	.word	0x2000024c

0800500c <__malloc_unlock>:
 800500c:	4801      	ldr	r0, [pc, #4]	; (8005014 <__malloc_unlock+0x8>)
 800500e:	f000 b80c 	b.w	800502a <__retarget_lock_release_recursive>
 8005012:	bf00      	nop
 8005014:	2000024c 	.word	0x2000024c

08005018 <_malloc_usable_size_r>:
 8005018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800501c:	1f18      	subs	r0, r3, #4
 800501e:	2b00      	cmp	r3, #0
 8005020:	bfbc      	itt	lt
 8005022:	580b      	ldrlt	r3, [r1, r0]
 8005024:	18c0      	addlt	r0, r0, r3
 8005026:	4770      	bx	lr

08005028 <__retarget_lock_acquire_recursive>:
 8005028:	4770      	bx	lr

0800502a <__retarget_lock_release_recursive>:
 800502a:	4770      	bx	lr

0800502c <_init>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	bf00      	nop
 8005030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005032:	bc08      	pop	{r3}
 8005034:	469e      	mov	lr, r3
 8005036:	4770      	bx	lr

08005038 <_fini>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	bf00      	nop
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr
